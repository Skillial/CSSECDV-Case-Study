<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="icon" href="/img/logo.png" type="image/png">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #e5e7eb;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #9ca3af;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        #dashboard-message-box {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            width: 100%;
            z-index: 999;
            padding-top: 1rem;
            padding-bottom: 1rem;
            box-sizing: border-box;
        }

        .sort-indicator {
            font-size: 0.6rem;
            vertical-align: middle;
        }

        .sortable-header {
            cursor: pointer;
            user-select: none;
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding-right: 0.5rem;
            padding-left: 0.5rem;
        }

        .sortable-header>span:first-child {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            min-width: 0;
        }

        .sort-icon {
            margin-left: 0.25rem;
            font-size: 0.75rem;
            line-height: 1;
            flex-shrink: 0;
        }

        .password-strength-bar {
            height: 8px;
            background-color: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
        }

        .password-strength-bar-fill {
            height: 100%;
            width: 0%;
            transition: width 0.3s ease-in-out, background-color 0.3s ease-in-out;
            border-radius: 4px;
        }

        .complexity-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1001;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }

        .complexity-modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .complexity-modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            max-width: 400px;
            width: 90%;
            transform: translateY(-20px);
            transition: transform 0.3s ease-in-out;
        }

        .complexity-modal-overlay.show .complexity-modal-content {
            transform: translateY(0);
        }
    </style>
</head>

<body class="bg-gray-100 min-h-screen text-gray-800 font-sans">
    <%- include('component/navbar') %>

        <div class="max-w-7xl mx-auto p-4">
            <div id="dashboard-message-box"
                class="hidden bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-xl relative mb-6"
                role="alert">
                <strong class="font-bold">System Message:</strong>
                <span class="block sm:inline" id="dashboard-message-content"></span>
                <span class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer"
                    onclick="this.parentElement.classList.add('hidden')">
                    <svg class="fill-current h-6 w-6 text-blue-500" role="button" xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20">
                        <title>Close</title>
                        <path
                            d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.697l-2.651 2.652a1.2 1.2 0 1 1-1.697-1.697L8.303 10 5.651 7.348a1.2 1.2 0 1 1 1.697-1.697L10 8.303l2.651-2.652a1.2 1.2 0 1 1 1.697 1.697L11.697 10l2.651 2.651a1.2 1.2 0 0 1 0 1.698z" />
                    </svg>
                </span>
            </div>

            <% if (lastLoginReport) { %>
                <div id="last-login-report"
                    class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-xl relative mb-6"
                    role="alert">
                    <strong class="font-bold">Login Report:</strong>
                    <span class="block sm:inline">
                        <%= lastLoginReport %>
                    </span>
                    <span class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer"
                        onclick="this.parentElement.classList.add('hidden')">
                        <svg class="fill-current h-6 w-6 text-blue-500" role="button" xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20">
                            <title>Close</title>
                            <path
                                d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.697l-2.651 2.652a1.2 1.2 0 1 1-1.697-1.697L8.303 10 5.651 7.348a1.2 1.2 0 1 1 1.697-1.697L10 8.303l2.651-2.652a1.2 1.2 0 1 1 1.697 1.697L11.697 10l2.651 2.651a1.2 1.2 0 0 1 0 1.698z" />
                        </svg>
                    </span>
                </div>
                <% } %>

                    <div class="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">

                        <div class="lg:col-span-1 flex flex-col gap-6">
                            <div
                                class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col justify-between items-center text-center">
                                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Total Sales This Month</h2>
                                <div id="monthly-sales" class="text-5xl md:text-6xl font-extrabold text-gray-900 mb-4">
                                    $0.00
                                </div>
                                <p class="text-gray-600 text-md">As of <span id="current-date"></span></p>
                            </div>

                            <div class="flex flex-col gap-6">
                                <div
                                    class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col justify-between items-center text-center h-full">
                                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Add New Admin</h2>
                                    <p class="text-gray-600 text-md mb-4">Register new administrators.</p>
                                    <button id="add-admin-btn"
                                        class="mt-auto bg-gray-800 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 transform hover:scale-105">
                                        Add Admin
                                    </button>
                                </div>
                                <div
                                    class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col justify-between items-center text-center h-full">
                                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Add New Employee</h2>
                                    <p class="text-gray-600 text-md mb-4">Onboard new employees.</p>
                                    <button id="add-employee-btn"
                                        class="mt-auto bg-gray-800 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 transform hover:scale-105">
                                        Add Employee
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div
                            class="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-2xl font-semibold text-gray-800">Customer Records</h2>
                                <div class="flex items-center gap-2">
                                    <input type="text" id="customer-search" placeholder="Search customers..."
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                    <button id="clear-customer-sort"
                                        class="px-3 py-2 text-sm bg-gray-200 hover:bg-gray-300 rounded-md whitespace-nowrap">Clear
                                        Sort</button>
                                </div>
                            </div>
                            <div class="overflow-x-auto max-h-[30rem] custom-scrollbar">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-100 sticky top-0">
                                        <tr>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tl-lg cursor-pointer hover:bg-gray-200"
                                                data-table="customers" data-column="id">Customer ID</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="customers" data-column="username">Name</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="customers" data-column="address">Address</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tr-lg cursor-pointer hover:bg-gray-200"
                                                data-table="customers" data-column="created_at">Member Since</th>
                                        </tr>
                                    </thead>
                                    <tbody id="customers-table-body" class="bg-white divide-y divide-gray-200"></tbody>
                                </table>
                            </div>
                            <p class="text-gray-500 text-sm mt-4">Tip: Hold Shift and click headers to sort by multiple
                                columns.</p>
                        </div>

                        <div
                            class="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-2xl font-semibold text-gray-800">Employee Transaction Records</h2>
                                <div class="flex items-center gap-2">
                                    <input type="text" id="transaction-search" placeholder="Search transactions..."
                                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                    <button id="clear-transaction-sort"
                                        class="px-3 py-2 text-sm bg-gray-200 hover:bg-gray-300 rounded-md whitespace-nowrap">Clear
                                        Sort</button>
                                </div>
                            </div>
                            <div class="overflow-x-auto max-h-96 custom-scrollbar">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-100 sticky top-0">
                                        <tr>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tl-lg cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="id">Order ID</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="customerName">Customer</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="productName">Product</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="category">Category</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="quantity">Qty</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="price">Price</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="date">Date</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tr-lg cursor-pointer hover:bg-gray-200"
                                                data-table="transactions" data-column="status">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody id="transactions-table-body" class="bg-white divide-y divide-gray-200">
                                    </tbody>
                                </table>
                            </div>
                            <p class="text-gray-500 text-sm mt-4">Tip: Hold Shift and click headers to sort by multiple
                                columns.</p>
                        </div>

                        <div
                            class="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                            <div class="flex flex-wrap justify-between items-center mb-4 gap-4">
                                <h2 class="text-2xl font-semibold text-gray-800">Security Audit Log</h2>
                                <div class="flex items-center gap-2 flex-wrap">
                                    <input type="text" id="audit-log-search" placeholder="Search logs..."
                                        class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                    <select id="audit-log-type-filter"
                                        class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                        <option value="">All Log Types</option>
                                        <option value="Authentication">Authentication</option>
                                        <option value="Access Control">Access Control</option>
                                        <option value="Input Validation">Input Validation</option>
                                        <option value="Account Management">Account Management</option>
                                        <option value="Order Management">Order Management</option>
                                    </select>
                                    <select id="audit-log-status-filter"
                                        class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                        <option value="">All Statuses</option>
                                        <option value="Success">Success</option>
                                        <option value="Failure">Failure</option>
                                    </select>
                                </div>
                            </div>
                            <div class="overflow-x-auto max-h-96 custom-scrollbar">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-100 sticky top-0">
                                        <tr>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tl-lg">
                                                Timestamp</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap">
                                                Event Type</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap">
                                                User</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap">
                                                Status</th>
                                            <th scope="col"
                                                class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tr-lg">
                                                Description</th>
                                        </tr>
                                    </thead>
                                    <tbody id="audit-log-table-body" class="bg-white divide-y divide-gray-200"></tbody>
                                </table>
                            </div>
                        </div>

                        <div
                            class="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Employee Item Assignments</h2>
                            <div id="employee-assignments-list" class="space-y-4"></div>
                        </div>
                    </div>
        </div>

        <div id="edit-assignment-modal" class="modal-overlay hidden">
            <div class="modal-content">
                <h3 class="text-xl font-bold text-gray-900 mb-4">Edit Assigned Items for <span
                        id="modal-employee-name"></span></h3>
                <label for="modal-assigned-items" class="block text-sm font-medium text-gray-700 mb-2">Assigned
                    Categories:</label>
                <select id="modal-assigned-items" multiple
                    class="w-full p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 mb-6 h-40"></select>
                <div class="flex justify-end space-x-3">
                    <button id="cancel-edit-btn"
                        class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancel</button>
                    <button id="save-edit-btn"
                        class="px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700">Save Changes</button>
                </div>
            </div>
        </div>

        <div id="admin-modal" class="modal-overlay hidden">
            <div class="modal-content">
                <button class="close-button absolute top-4 right-4 text-gray-500 hover:text-black text-2xl"
                    id="closeAdminModalBtn">&times;</button>
                <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Add New Admin</h2>
                <div id="admin-error-message-display"
                    class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl relative text-sm text-center mb-4 hidden"
                    role="alert"></div>
                <form id="adminForm" class="space-y-4">
                    <div>
                        <label for="admin-username" class="block text-sm font-medium text-gray-700">Username</label>
                        <input type="text" id="admin-username" name="username"
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                            placeholder="Enter username" required minlength="3" maxlength="20">
                    </div>
                    <div>
                        <label for="admin-password" class="block text-sm font-medium text-gray-700">Password</label>
                        <div class="relative mt-1">
                            <input type="password" id="admin-password" name="password"
                                class="block w-full px-3 py-2 border border-gray-300 rounded-md pr-10"
                                placeholder="Set password" required maxlength="50">
                            <svg id="toggleAdminPassword"
                                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer"
                                width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2">
                                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                                <path id="adminEyeSlashPath" class="hidden" d="M1 1l22 22"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="mt-2">
                        <div class="password-strength-bar">
                            <div id="adminStrengthBarFill" class="password-strength-bar-fill"></div>
                        </div>
                        <div class="flex justify-between items-center mt-1.5">
                            <p id="adminStrengthText" class="text-sm text-gray-600">Password Strength: Very Weak</p>
                            <button type="button" id="openAdminComplexityModal"
                                class="text-sm text-gray-600 hover:text-gray-900 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400 rounded-md px-1">
                                Requirements
                            </button>
                        </div>
                    </div>
                    <div>
                        <label for="admin-confirm-password" class="block text-sm font-medium text-gray-700">Confirm
                            Password</label>
                        <div class="relative mt-1">
                            <input type="password" id="admin-confirm-password" name="confirmPassword"
                                class="block w-full px-3 py-2 border border-gray-300 rounded-md pr-10"
                                placeholder="Confirm password" required maxlength="50">
                            <svg id="toggleAdminConfirmPassword"
                                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer"
                                width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2">
                                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                                <path id="adminConfirmEyeSlashPath" class="hidden" d="M1 1l22 22"></path>
                            </svg>
                        </div>
                    </div>
                    <button type="submit"
                        class="w-full bg-gray-800 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg">Create
                        Admin</button>
                </form>
            </div>
        </div>

        <div id="adminComplexityModal" class="complexity-modal-overlay">
            <div class="modal-content">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-gray-900">Password Requirements</h3>
                    <button id="closeAdminComplexityModal"
                        class="text-gray-500 hover:text-gray-700 text-2xl leading-none">&times;</button>
                </div>
                <div id="adminPasswordComplexityList" class="text-sm text-gray-700">
                    <p class="font-semibold mb-1">Your password must contain:</p>
                    <ul class="list-disc list-inside ml-4 space-y-1">
                        <li id="adminModalLengthCheck" class="text-gray-700">At least 8 characters</li>
                        <li id="adminModalUppercaseCheck" class="text-gray-700">An uppercase letter</li>
                        <li id="adminModalLowercaseCheck" class="text-gray-700">A lowercase letter</li>
                        <li id="adminModalNumberCheck" class="text-gray-700">A number</li>
                        <li id="adminModalSpecialCharCheck" class="text-gray-700">A special character (!@#$%^&*)</li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="employee-modal" class="modal-overlay hidden">
            <div class="modal-content">
                <button class="close-button absolute top-4 right-4 text-gray-500 hover:text-black text-2xl"
                    id="closeEmployeeModalBtn">&times;</button>
                <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Add New Employee</h2>
                <div id="employee-error-message-display"
                    class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl relative text-sm text-center mb-4 hidden"
                    role="alert"></div>
                <form id="employeeForm" class="space-y-4">
                    <div>
                        <label for="employee-username" class="block text-sm font-medium text-gray-700">Username</label>
                        <input type="text" id="employee-username" name="username"
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                            placeholder="Enter username" required minlength="3" maxlength="20">
                    </div>
                    <div>
                        <label for="employee-password" class="block text-sm font-medium text-gray-700">Password</label>
                        <div class="relative mt-1">
                            <input type="password" id="employee-password" name="password"
                                class="block w-full px-3 py-2 border border-gray-300 rounded-md pr-10"
                                placeholder="Set password" required maxlength="50">
                            <svg id="toggleEmployeePassword"
                                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer"
                                width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2">
                                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                                <path id="employeeEyeSlashPath" class="hidden" d="M1 1l22 22"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="mt-2">
                        <div class="password-strength-bar">
                            <div id="employeeStrengthBarFill" class="password-strength-bar-fill"></div>
                        </div>
                        <div class="flex justify-between items-center mt-1.5">
                            <p id="employeeStrengthText" class="text-sm text-gray-600">Password Strength: Very Weak</p>
                            <button type="button" id="openEmployeeComplexityModal"
                                class="text-sm text-gray-600 hover:text-gray-900 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400 rounded-md px-1">
                                Requirements
                            </button>
                        </div>
                    </div>
                    <div>
                        <label for="employee-confirm-password" class="block text-sm font-medium text-gray-700">Confirm
                            Password</label>
                        <div class="relative mt-1">
                            <input type="password" id="employee-confirm-password" name="confirmPassword"
                                class="block w-full px-3 py-2 border border-gray-300 rounded-md pr-10"
                                placeholder="Confirm password" required maxlength="50">
                            <svg id="toggleEmployeeConfirmPassword"
                                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer"
                                width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2">
                                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                                <path id="employeeConfirmEyeSlashPath" class="hidden" d="M1 1l22 22"></path>
                            </svg>
                        </div>
                    </div>
                    <button type="submit"
                        class="w-full bg-gray-800 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg">Create
                        Employee</button>
                </form>
            </div>
        </div>

        <div id="employeeComplexityModal" class="complexity-modal-overlay">
            <div class="modal-content">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-gray-900">Password Requirements</h3>
                    <button id="closeEmployeeComplexityModal"
                        class="text-gray-500 hover:text-gray-700 text-2xl leading-none">&times;</button>
                </div>
                <div id="employeePasswordComplexityList" class="text-sm text-gray-700">
                    <p class="font-semibold mb-1">Your password must contain:</p>
                    <ul class="list-disc list-inside ml-4 space-y-1">
                        <li id="employeeModalLengthCheck" class="text-gray-700">At least 8 characters</li>
                        <li id="employeeModalUppercaseCheck" class="text-gray-700">An uppercase letter</li>
                        <li id="employeeModalLowercaseCheck" class="text-gray-700">A lowercase letter</li>
                        <li id="employeeModalNumberCheck" class="text-gray-700">A number</li>
                        <li id="employeeModalSpecialCharCheck" class="text-gray-700">A special character (!@#$%^&*)</li>
                    </ul>
                </div>
            </div>
        </div>

        <script>
            let customers = <%- JSON.stringify(customers || []) %>;
            let employees = <%- JSON.stringify(employees || []) %>;
            let transactions = [];
            let auditLogs = [];

            const mockCategories = [
                'Living Room', 'Bedroom', 'Dining Room', 'Office', 'Outdoor', 'Storage', 'Children\'s', 'Entryway', 'Accent', 'Modular'
            ];

            let customerSearchTerm = '';
            let transactionSearchTerm = '';
            let auditLogSearchTerm = '';
            let auditLogTypeFilter = '';
            let auditLogStatusFilter = '';
            let customerSortCriteria = [];
            let transactionSortCriteria = [];

            const openModal = (modalId) => document.getElementById(modalId).classList.remove('hidden');
            const closeModal = (modalId) => document.getElementById(modalId).classList.add('hidden');
            const showMessage = (message, type = 'info') => {
                const box = document.getElementById('dashboard-message-box');
                document.getElementById('dashboard-message-content').textContent = message;
                box.classList.remove('hidden');
                box.classList.remove('bg-blue-100', 'border-blue-400', 'text-blue-700', 'bg-green-100', 'border-green-400', 'text-green-700', 'bg-red-100', 'border-red-400', 'text-red-700');
                if (type === 'success') {
                    box.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
                } else if (type === 'error') {
                    box.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
                } else {
                    box.classList.add('bg-blue-100', 'border-blue-400', 'text-blue-700');
                }
                setTimeout(() => box.classList.add('hidden'), 5000);
            };

            const filterData = (data, searchTerm, tableType) => {
                if (!searchTerm) return data;
                const lowercasedTerm = searchTerm.toLowerCase();
                return data.filter(item => {
                    const searchableItem = { ...item };
                    if (tableType === 'transactions') {
                        searchableItem.price = `$${item.price.toFixed(2)}`;
                        searchableItem.date = new Date(item.date).toLocaleDateString();
                    }
                    if (tableType === 'customers') {
                        searchableItem.created_at = new Date(item.created_at).toLocaleDateString();
                    }
                    return Object.values(searchableItem).some(val =>
                        val && val.toString().toLowerCase().includes(lowercasedTerm)
                    );
                });
            };

            const getSortValue = (obj, column) => {
                const value = obj[column];
                if (column === 'date' && (value instanceof Date || (typeof value === 'string' && !isNaN(new Date(value))))) {
                    const date = new Date(value);
                    date.setHours(0, 0, 0, 0);
                    return date.getTime();
                }
                if (typeof value === 'number') return value;
                if (typeof value === 'string') return value.toLowerCase();
                return value;
            };

            const sortData = (data, criteria) => {
                if (!criteria.length) return data;
                return [...data].sort((a, b) => {
                    for (const { column, direction } of criteria) {
                        const valA = getSortValue(a, column);
                        const valB = getSortValue(b, column);
                        if (valA < valB) return direction === 'asc' ? -1 : 1;
                        if (valA > valB) return direction === 'asc' ? 1 : -1;
                    }
                    return 0;
                });
            };

            const renderCustomers = () => {
                const filtered = filterData(customers, customerSearchTerm, 'customers');
                const sorted = sortData(filtered, customerSortCriteria);
                const tableBody = document.getElementById('customers-table-body');
                tableBody.innerHTML = sorted.map(customer => `
                <tr class="hover:bg-gray-100">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${customer.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${customer.username}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${customer.address || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${new Date(customer.created_at).toLocaleDateString()}</td>
                </tr>
            `).join('');
            };

            const renderTransactions = () => {
                const filtered = filterData(transactions, transactionSearchTerm, 'transactions');
                const sorted = sortData(filtered, transactionSortCriteria);
                const tableBody = document.getElementById('transactions-table-body');
                const statusColors = { 'Completed': 'bg-green-100 text-green-800', 'Pending': 'bg-yellow-100 text-yellow-800', 'Failed': 'bg-red-100 text-red-800', 'Refunded': 'bg-blue-100 text-blue-800' };
                tableBody.innerHTML = sorted.map(t => `
                <tr class="hover:bg-gray-100">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${t.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.customerName}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.productName}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.category}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700 text-center">${t.quantity}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">₱${t.price.toFixed(2)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${new Date(t.date).toLocaleDateString()}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColors[t.status] || 'bg-gray-100'}">${t.status}</span></td>
                </tr>
            `).join('');
            };

            const renderAuditLogs = () => {
                let filteredLogs = auditLogs;
                if (auditLogSearchTerm) {
                    const lowercasedTerm = auditLogSearchTerm.toLowerCase();
                    filteredLogs = filteredLogs.filter(log =>
                        Object.values(log).some(val => val.toString().toLowerCase().includes(lowercasedTerm))
                    );
                }

                if (auditLogTypeFilter) {
                    filteredLogs = filteredLogs.filter(log => log.event_type === auditLogTypeFilter);
                }

                if (auditLogStatusFilter) {
                    filteredLogs = filteredLogs.filter(log => log.status === auditLogStatusFilter);
                }

                const tableBody = document.getElementById('audit-log-table-body');
                const statusColors = { 'Success': 'bg-green-100 text-green-800', 'Failure': 'bg-red-100 text-red-800' };
                tableBody.innerHTML = filteredLogs.map(log => `
                <tr class="hover:bg-gray-100">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${new Date(log.timestamp).toLocaleString()}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${log.event_type}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${log.username}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColors[log.status] || 'bg-gray-100'}">${log.status}</span></td>
                    <td class="px-6 py-4 whitespace-normal text-sm text-gray-700">${log.description}</td>
                </tr>
            `).join('');
            };

            const renderMonthlySales = () => {
                const totalSales = transactions.reduce((acc, t) => acc + (t.price * t.quantity), 0);
                document.getElementById('monthly-sales').textContent = `₱${totalSales.toFixed(2)}`;
                document.getElementById('current-date').textContent = new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
            };

            const renderEmployeeAssignments = () => {
                const listContainer = document.getElementById('employee-assignments-list');
                listContainer.innerHTML = employees.map(employee => `
                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg border hover:bg-gray-100">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">${employee.username}</h3>
                        <div class="mt-2 flex flex-wrap gap-2">${employee.assignedItems && employee.assignedItems.length > 0 ? employee.assignedItems.map(item => `<span class="inline-block bg-gray-200 text-gray-800 text-xs px-2 py-1 rounded-full">${item}</span>`).join(' ') : '<span class="text-gray-500 text-sm">No items assigned</span>'}</div>
                    </div>
                    <button class="edit-assigned-items-btn bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700 text-sm" data-employee-id="${employee.id}">Edit</button>
                </div>
            `).join('');
                document.querySelectorAll('.edit-assigned-items-btn').forEach(btn => btn.addEventListener('click', (e) => openEditModal(e.target.dataset.employeeId)));
            };

            const updateSortIndicators = (table, criteria) => {
                table.querySelectorAll('th[data-column]').forEach(th => {
                    const indicator = th.querySelector('.sort-indicator');
                    if (indicator) indicator.remove();
                });
                criteria.forEach(({ column, direction }, index) => {
                    const header = table.querySelector(`th[data-column="${column}"]`);
                    if (header) {
                        const indicator = document.createElement('span');
                        indicator.className = 'sort-indicator ml-1';
                        indicator.innerHTML = `(${index + 1}) ${direction === 'asc' ? '▲' : '▼'}`;
                        header.appendChild(indicator);
                    }
                });
            };

            const fetchAndRenderAllData = async () => {
                try {
                    const transactionsResponse = await fetch('/get/transactions');
                    if (!transactionsResponse.ok) {
                        throw new Error(`Failed to fetch transactions: ${transactionsResponse.statusText}`);
                    }
                    transactions = await transactionsResponse.json();

                    const auditLogsResponse = await fetch('/get/dashboard');
                    if (!auditLogsResponse.ok) {
                        throw new Error(`Failed to fetch audit logs: ${auditLogsResponse.statusText}`);
                    }
                    auditLogs = await auditLogsResponse.json();

                    fullRender();
                } catch (error) {
                    console.error('Error fetching dashboard data:', error);
                    showMessage(`Error loading data: ${error.message}`, 'error');
                }
            };

            const fullRender = () => {
                renderCustomers();
                renderTransactions();
                renderAuditLogs();
                renderMonthlySales();
                renderEmployeeAssignments();
                updateSortIndicators(document.querySelector('#customers-table-body').closest('table'), customerSortCriteria);
                updateSortIndicators(document.querySelector('#transactions-table-body').closest('table'), transactionSortCriteria);
            };

            document.getElementById('add-admin-btn').addEventListener('click', () => openModal('admin-modal'));
            document.getElementById('add-employee-btn').addEventListener('click', () => openModal('employee-modal'));

            document.querySelectorAll('.modal-overlay').forEach(m => m.addEventListener('click', (e) => {
                if (e.target === m) closeModal(m.id);
            }));
            document.getElementById('closeAdminModalBtn').addEventListener('click', () => closeModal('admin-modal'));
            document.getElementById('closeEmployeeModalBtn').addEventListener('click', () => closeModal('employee-modal'));


            document.getElementById('customer-search').addEventListener('input', e => {
                customerSearchTerm = e.target.value;
                renderCustomers();
            });
            document.getElementById('transaction-search').addEventListener('input', e => {
                transactionSearchTerm = e.target.value;
                renderTransactions();
            });

            document.getElementById('audit-log-search').addEventListener('input', e => {
                auditLogSearchTerm = e.target.value;
                renderAuditLogs();
            });
            document.getElementById('audit-log-type-filter').addEventListener('change', e => {
                auditLogTypeFilter = e.target.value;
                renderAuditLogs();
            });
            document.getElementById('audit-log-status-filter').addEventListener('change', e => {
                auditLogStatusFilter = e.target.value;
                renderAuditLogs();
            });


            document.getElementById('clear-customer-sort').addEventListener('click', () => {
                customerSortCriteria = [];
                fullRender();
            });
            document.getElementById('clear-transaction-sort').addEventListener('click', () => {
                transactionSortCriteria = [];
                fullRender();
            });

            document.querySelectorAll('th[data-column]').forEach(header => {
                header.addEventListener('click', (e) => {
                    const column = header.dataset.column;
                    const tableId = header.dataset.table;
                    let criteria = tableId === 'customers' ? customerSortCriteria : transactionSortCriteria;

                    const existingIndex = criteria.findIndex(c => c.column === column);

                    if (e.shiftKey) {
                        if (existingIndex > -1) {
                            criteria[existingIndex].direction = criteria[existingIndex].direction === 'asc' ? 'desc' : 'asc';
                        } else {
                            criteria.push({ column, direction: 'asc' });
                        }
                    } else {
                        if (existingIndex > -1) {
                            const newDirection = criteria[existingIndex].direction === 'asc' ? 'desc' : 'asc';
                            criteria = [{ column, direction: newDirection }];
                        } else {
                            criteria = [{ column, direction: 'asc' }];
                        }
                    }

                    if (tableId === 'customers') {
                        customerSortCriteria = criteria;
                    } else {
                        transactionSortCriteria = criteria;
                    }
                    fullRender();
                });
            });

            let currentEditingEmployeeId = null;
            const openEditModal = (employeeId) => {
                const employee = employees.find(emp => emp.id === parseInt(employeeId));
                if (!employee) {
                    console.error('Employee not found for ID:', employeeId);
                    return;
                }
                currentEditingEmployeeId = employeeId;
                document.getElementById('modal-employee-name').textContent = employee.username;
                const select = document.getElementById('modal-assigned-items');

                select.innerHTML = mockCategories.map(item => `<option value="${item}" ${employee.assignedItems && employee.assignedItems.includes(item) ? 'selected' : ''}>${item}</option>`).join('');
                openModal('edit-assignment-modal');
            };
            document.getElementById('save-edit-btn').addEventListener('click', async () => {
                const employee = employees.find(emp => emp.id === parseInt(currentEditingEmployeeId));
                if (employee) {
                    const newAssignedItems = Array.from(document.getElementById('modal-assigned-items').selectedOptions).map(opt => opt.value);

                    try {
                        const response = await fetch('/employee/assign', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                employeeId: employee.id,
                                assignedCategories: newAssignedItems
                            }),
                        });

                        const result = await response.json();

                        if (response.ok) {
                            employee.assignedItems = newAssignedItems;
                            showMessage(result.message, 'success');
                            renderEmployeeAssignments();
                            closeModal('edit-assignment-modal');
                        } else {
                            showMessage(result.message || 'Failed to update assignments.', 'error');
                        }
                    } catch (error) {
                        console.error('Network error during assignment update:', error);
                        showMessage('Network error: Could not connect to server.', 'error');
                    }
                }
            });
            document.getElementById('cancel-edit-btn').addEventListener('click', () => closeModal('edit-assignment-modal'));

            function updateCheckUI(element, isMet) {
                element.classList.remove('text-red-600', 'text-green-600', 'text-gray-700');
                if (isMet) {
                    element.classList.add('text-green-600');
                } else {
                    element.classList.add('text-red-600');
                }
            }

            function checkPasswordComplexity(passwordInputId, strengthBarFillId, strengthTextId, modalLengthCheckId, modalUppercaseCheckId, modalLowercaseCheckId, modalNumberCheckId, modalSpecialCharCheckId) {
                const password = document.getElementById(passwordInputId).value;
                let checksMet = 0;

                const checks = {
                    length: password.length >= 8,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /[0-9]/.test(password),
                    special: /[!@#$%^&*]/.test(password),
                };

                updateCheckUI(document.getElementById(modalLengthCheckId), checks.length);
                updateCheckUI(document.getElementById(modalUppercaseCheckId), checks.uppercase);
                updateCheckUI(document.getElementById(modalLowercaseCheckId), checks.lowercase);
                updateCheckUI(document.getElementById(modalNumberCheckId), checks.number);
                updateCheckUI(document.getElementById(modalSpecialCharCheckId), checks.special);

                checksMet = Object.values(checks).filter(Boolean).length;

                const totalChecks = 5;
                const strengthPercentage = (checksMet / totalChecks) * 100;
                const strengthBarFill = document.getElementById(strengthBarFillId);
                const strengthText = document.getElementById(strengthTextId);

                strengthBarFill.style.width = `${strengthPercentage}%`;

                let strengthColor = '#e0e0e0';
                let strengthMessage = 'Very Weak';

                if (checksMet === 1) {
                    strengthColor = '#f87171';
                    strengthMessage = 'Weak';
                } else if (checksMet === 2) {
                    strengthColor = '#fbbf24';
                    strengthMessage = 'Fair';
                } else if (checksMet === 3) {
                    strengthColor = '#fcd34d';
                    strengthMessage = 'Good';
                } else if (checksMet === 4) {
                    strengthColor = '#84cc16';
                    strengthMessage = 'Strong';
                } else if (checksMet === 5) {
                    strengthColor = '#22c55e';
                    strengthMessage = 'Very Strong';
                }

                strengthBarFill.style.backgroundColor = strengthColor;
                strengthText.textContent = `Password Strength: ${strengthMessage}`;

                return checksMet === totalChecks;
            }

            function showModalErrors(displayElementId, messages) {
                const displayElement = document.getElementById(displayElementId);
                displayElement.innerHTML = '';
                displayElement.classList.add('hidden');
                displayElement.classList.remove('bg-red-100', 'border-red-400', 'text-red-700');

                if (messages && messages.length > 0) {
                    displayElement.innerHTML = messages.map(msg => `<p>${msg}</p>`).join('');
                    displayElement.classList.remove('hidden');
                    displayElement.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
                }
            }

            function hideModalErrors(displayElementId) {
                const displayElement = document.getElementById(displayElementId);
                displayElement.classList.add('hidden');
                displayElement.innerHTML = '';
            }

            const adminUsernameInput = document.getElementById('admin-username');
            const adminPasswordInput = document.getElementById('admin-password');
            const adminConfirmPasswordInput = document.getElementById('admin-confirm-password');
            const adminForm = document.getElementById('adminForm');
            const adminErrorMessageDisplay = document.getElementById('admin-error-message-display');

            adminPasswordInput.addEventListener('input', () => {
                checkPasswordComplexity('admin-password', 'adminStrengthBarFill', 'adminStrengthText', 'adminModalLengthCheck', 'adminModalUppercaseCheck', 'adminModalLowercaseCheck', 'adminModalNumberCheck', 'adminModalSpecialCharCheck');
                hideModalErrors('admin-error-message-display');
            });
            adminConfirmPasswordInput.addEventListener('input', () => {
                hideModalErrors('admin-error-message-display');
            });
            adminUsernameInput.addEventListener('input', () => {
                hideModalErrors('admin-error-message-display');
            });

            adminForm.addEventListener('submit', async function (event) {
                event.preventDefault();
                let clientErrors = [];
                const username = adminUsernameInput.value.trim();
                const password = adminPasswordInput.value;

                if (username.length < 3 || username.length > 20) {
                    clientErrors.push('Username must be between 3 and 20 characters long.');
                }

                if (password.length > 50) {
                    clientErrors.push('Password cannot exceed 50 characters.');
                }

                const isPasswordComplex = checkPasswordComplexity('admin-password', 'adminStrengthBarFill', 'adminStrengthText', 'adminModalLengthCheck', 'adminModalUppercaseCheck', 'adminModalLowercaseCheck', 'adminModalNumberCheck', 'adminModalSpecialCharCheck');

                if (password !== adminConfirmPasswordInput.value) {
                    clientErrors.push('Passwords do not match.');
                }
                if (!isPasswordComplex) {
                    clientErrors.push('Password does not meet complexity requirements.');
                }

                if (clientErrors.length > 0) {
                    showModalErrors('admin-error-message-display', clientErrors);
                } else {
                    hideModalErrors('admin-error-message-display');

                    try {
                        const response = await fetch('/register/admin', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                username: username,
                                password: password,
                                confirmPassword: adminConfirmPasswordInput.value
                            })
                        });

                        if (response.ok) {
                            showMessage('Admin created successfully!', 'success');
                            closeModal('admin-modal');
                            adminForm.reset();
                        } else {
                            const errorData = await response.json();
                            showModalErrors('admin-error-message-display', [errorData.message || 'An unknown error occurred.']);
                        }
                    } catch (error) {
                        console.error('Error creating admin:', error);
                        showModalErrors('admin-error-message-display', ['Network error or server unreachable.']);
                    }
                }
            });

            document.getElementById('openAdminComplexityModal').addEventListener('click', () => {
                document.getElementById('adminComplexityModal').classList.add('show');
                checkPasswordComplexity('admin-password', 'adminStrengthBarFill', 'adminStrengthText', 'adminModalLengthCheck', 'adminModalUppercaseCheck', 'adminModalLowercaseCheck', 'adminModalNumberCheck', 'adminModalSpecialCharCheck');
            });
            document.getElementById('closeAdminComplexityModal').addEventListener('click', () => {
                document.getElementById('adminComplexityModal').classList.remove('show');
            });
            document.getElementById('adminComplexityModal').addEventListener('click', (event) => {
                if (event.target === document.getElementById('adminComplexityModal')) {
                    document.getElementById('adminComplexityModal').classList.remove('show');
                }
            });

            const employeeUsernameInput = document.getElementById('employee-username');
            const employeePasswordInput = document.getElementById('employee-password');
            const employeeConfirmPasswordInput = document.getElementById('employee-confirm-password');
            const employeeForm = document.getElementById('employeeForm');
            const employeeErrorMessageDisplay = document.getElementById('employee-error-message-display');

            employeePasswordInput.addEventListener('input', () => {
                checkPasswordComplexity('employee-password', 'employeeStrengthBarFill', 'employeeStrengthText', 'employeeModalLengthCheck', 'employeeModalUppercaseCheck', 'employeeModalLowercaseCheck', 'employeeModalNumberCheck', 'employeeModalSpecialCharCheck');
                hideModalErrors('employee-error-message-display');
            });
            employeeConfirmPasswordInput.addEventListener('input', () => {
                hideModalErrors('employee-error-message-display');
            });
            employeeUsernameInput.addEventListener('input', () => {
                hideModalErrors('employee-error-message-display');
            });

            employeeForm.addEventListener('submit', async function (event) {
                event.preventDefault();
                let clientErrors = [];
                const username = employeeUsernameInput.value.trim();
                const password = employeePasswordInput.value;

                if (username.length < 3 || username.length > 20) {
                    clientErrors.push('Username must be between 3 and 20 characters long.');
                }

                if (password.length > 50) {
                    clientErrors.push('Password cannot exceed 50 characters.');
                }

                const isPasswordComplex = checkPasswordComplexity('employee-password', 'employeeStrengthBarFill', 'employeeStrengthText', 'employeeModalLengthCheck', 'employeeModalUppercaseCheck', 'employeeModalLowercaseCheck', 'employeeModalNumberCheck', 'employeeModalSpecialCharCheck');

                if (password !== employeeConfirmPasswordInput.value) {
                    clientErrors.push('Passwords do not match.');
                }
                if (!isPasswordComplex) {
                    clientErrors.push('Password does not meet complexity requirements.');
                }

                if (clientErrors.length > 0) {
                    showModalErrors('employee-error-message-display', clientErrors);
                } else {
                    hideModalErrors('employee-error-message-display');
                    try {
                        const response = await fetch('/register/manager', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                username: username,
                                password: password,
                                confirmPassword: employeeConfirmPasswordInput.value
                            })
                        });

                        if (response.ok) {
                            showMessage('Employee created successfully!', 'success');
                            closeModal('employee-modal');
                            employeeForm.reset();
                        } else {
                            const errorData = await response.json();
                            showModalErrors('employee-error-message-display', [errorData.message || 'An unknown error occurred.']);
                        }
                    } catch (error) {
                        console.error('Error creating employee:', error);
                        showModalErrors('employee-error-message-display', ['Network error or server unreachable.']);
                    }
                }
            });

            document.getElementById('openEmployeeComplexityModal').addEventListener('click', () => {
                document.getElementById('employeeComplexityModal').classList.add('show');
                checkPasswordComplexity('employee-password', 'employeeStrengthBarFill', 'employeeStrengthText', 'employeeModalLengthCheck', 'employeeModalUppercaseCheck', 'employeeModalLowercaseCheck', 'employeeModalNumberCheck', 'employeeModalSpecialCharCheck');
            });
            document.getElementById('closeEmployeeComplexityModal').addEventListener('click', () => {
                document.getElementById('employeeComplexityModal').classList.remove('show');
            });
            document.getElementById('employeeComplexityModal').addEventListener('click', (event) => {
                if (event.target === document.getElementById('employeeComplexityModal')) {
                    document.getElementById('employeeComplexityModal').classList.remove('show');
                }
            });

            function setupPasswordToggle(toggleId, inputId, eyeSlashPathId) {
                const toggleButton = document.getElementById(toggleId);
                const passwordInput = document.getElementById(inputId);
                const eyeSlashPath = document.getElementById(eyeSlashPathId);

                if (toggleButton && passwordInput && eyeSlashPath) {
                    toggleButton.addEventListener('click', () => {
                        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                        passwordInput.setAttribute('type', type);
                        eyeSlashPath.classList.toggle('hidden');
                    });
                }
            }

            setupPasswordToggle('toggleAdminPassword', 'admin-password', 'adminEyeSlashPath');
            setupPasswordToggle('toggleAdminConfirmPassword', 'admin-confirm-password', 'adminConfirmEyeSlashPath');
            setupPasswordToggle('toggleEmployeePassword', 'employee-password', 'employeeEyeSlashPath');
            setupPasswordToggle('toggleEmployeeConfirmPassword', 'employee-confirm-password', 'employeeConfirmEyeSlashPath');

            const passwordFields = [
                adminPasswordInput, adminConfirmPasswordInput,
                employeePasswordInput, employeeConfirmPasswordInput
            ];
            passwordFields.forEach(field => {
                field.addEventListener('copy', (e) => e.preventDefault());
                field.addEventListener('paste', (e) => e.preventDefault());
                field.addEventListener('cut', (e) => e.preventDefault());
            });

            document.addEventListener('DOMContentLoaded', () => {
                fetchAndRenderAllData();
                checkPasswordComplexity('admin-password', 'adminStrengthBarFill', 'adminStrengthText', 'adminModalLengthCheck', 'adminModalUppercaseCheck', 'adminModalLowercaseCheck', 'adminModalNumberCheck', 'adminModalSpecialCharCheck');
                checkPasswordComplexity('employee-password', 'employeeStrengthBarFill', 'employeeStrengthText', 'employeeModalLengthCheck', 'employeeModalUppercaseCheck', 'employeeModalLowercaseCheck', 'employeeModalNumberCheck', 'employeeModalSpecialCharCheck');
            });
        </script>
</body>

</html>