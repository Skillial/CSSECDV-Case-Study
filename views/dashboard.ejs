<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom scrollbar for light theme */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #e5e7eb; /* gray-200 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #9ca3af; /* gray-400 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* gray-500 */
        }

        /* Modal overlay styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        /* Fixed Message Box Styles */
        #dashboard-message-box {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            width: 100%;
            z-index: 999; /* Ensure it's above other content but below modals */
            padding-top: 1rem;
            padding-bottom: 1rem;
            box-sizing: border-box;
        }
        .sort-indicator {
            font-size: 0.6rem;
            vertical-align: middle;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen text-gray-800 font-sans">
    <%- include('component/navbar') %>

    <div class="max-w-7xl mx-auto p-4">
        <!-- Message Box for User Feedback -->
        <div id="dashboard-message-box" class="hidden bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-xl relative mb-6" role="alert">
            <strong class="font-bold">System Message:</strong>
            <span class="block sm:inline" id="dashboard-message-content"></span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer" onclick="this.parentElement.classList.add('hidden')">
                <svg class="fill-current h-6 w-6 text-blue-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.697l-2.651 2.652a1.2 1.2 0 1 1-1.697-1.697L8.303 10 5.651 7.348a1.2 1.2 0 1 1 1.697-1.697L10 8.303l2.651-2.652a1.2 1.2 0 1 1 1.697 1.697L11.697 10l2.651 2.651a1.2 1.2 0 0 1 0 1.698z"/></svg>
            </span>
        </div>

        <!-- Main Dashboard Content Grid -->
        <div class="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">

            <!-- Left Column: Contains Sales, Add Admin, Add Employee -->
            <div class="lg:col-span-1 flex flex-col gap-6">
                <!-- Monthly Sales Card -->
                <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col justify-between items-center text-center">
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Total Sales This Month</h2>
                    <div id="monthly-sales" class="text-5xl md:text-6xl font-extrabold text-gray-900 mb-4">
                        $0.00
                    </div>
                    <p class="text-gray-600 text-md">As of <span id="current-date"></span></p>
                </div>

                <!-- New Admin and Employee Sections -->
                <div class="flex flex-col gap-6">
                    <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col justify-between items-center text-center h-full">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Add New Admin</h2>
                        <p class="text-gray-600 text-md mb-4">Register new administrators.</p>
                        <button id="add-admin-btn" class="mt-auto bg-gray-800 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 transform hover:scale-105" onclick="openModal('admin-modal')">
                            Add Admin
                        </button>
                    </div>
                    <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col justify-between items-center text-center h-full">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Add New Employee</h2>
                        <p class="text-gray-600 text-md mb-4">Onboard new employees.</p>
                        <button id="add-employee-btn" class="mt-auto bg-gray-800 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 transform hover:scale-105">
                            Add Employee
                        </button>
                    </div>
                </div>
            </div>

            <!-- Customer Records Section -->
            <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-800">Customer Records</h2>
                    <div class="flex items-center gap-2">
                        <input type="text" id="customer-search" placeholder="Search customers..." class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        <button id="clear-customer-sort" class="px-3 py-2 text-sm bg-gray-200 hover:bg-gray-300 rounded-md whitespace-nowrap">Clear Sort</button>
                    </div>
                </div>
                <div class="overflow-x-auto max-h-[30rem] custom-scrollbar">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-100 sticky top-0">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tl-lg cursor-pointer hover:bg-gray-200" data-table="customers" data-column="id">Customer ID</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="customers" data-column="name">Name</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="customers" data-column="address">Address</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tr-lg cursor-pointer hover:bg-gray-200" data-table="customers" data-column="created_at">Member Since</th>
                            </tr>
                        </thead>
                        <tbody id="customers-table-body" class="bg-white divide-y divide-gray-200"></tbody>
                    </table>
                </div>
                <p class="text-gray-500 text-sm mt-4">Tip: Hold Shift and click headers to sort by multiple columns.</p>
            </div>

            <!-- Employee Transaction Records Section -->
            <div class="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-800">Employee Transaction Records</h2>
                     <div class="flex items-center gap-2">
                        <input type="text" id="transaction-search" placeholder="Search transactions..." class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        <button id="clear-transaction-sort" class="px-3 py-2 text-sm bg-gray-200 hover:bg-gray-300 rounded-md whitespace-nowrap">Clear Sort</button>
                    </div>
                </div>
                <div class="overflow-x-auto max-h-96 custom-scrollbar">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-100 sticky top-0">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tl-lg cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="id">ID</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="employeeName">Employee</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="customerName">Customer</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="itemName">Item</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="quantity">Qty</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="price">Price</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="date">Date</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider whitespace-nowrap rounded-tr-lg cursor-pointer hover:bg-gray-200" data-table="transactions" data-column="status">Status</th>
                            </tr>
                        </thead>
                        <tbody id="transactions-table-body" class="bg-white divide-y divide-gray-200"></tbody>
                    </table>
                </div>
                 <p class="text-gray-500 text-sm mt-4">Tip: Hold Shift and click headers to sort by multiple columns.</p>
            </div>

            <!-- Employee Item Assignments Section -->
            <div class="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Employee Item Assignments</h2>
                <div id="employee-assignments-list" class="space-y-4"></div>
            </div>
        </div>
    </div>

    <!-- All Modals -->
    <div id="edit-assignment-modal" class="modal-overlay hidden">
        <div class="modal-content">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Edit Assigned Items for <span id="modal-employee-name"></span></h3>
            <label for="modal-assigned-items" class="block text-sm font-medium text-gray-700 mb-2">Assigned Categories:</label>
            <select id="modal-assigned-items" multiple class="w-full p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 mb-6 h-40"></select>
            <div class="flex justify-end space-x-3">
                <button id="cancel-edit-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancel</button>
                <button id="save-edit-btn" class="px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700">Save Changes</button>
            </div>
        </div>
    </div>
    <div id="admin-modal" class="modal-overlay hidden">
        <div class="modal-content">
            <button class="close-button absolute top-4 right-4 text-gray-500 hover:text-black text-2xl">&times;</button>
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Add New Admin</h2>
            <form class="space-y-4">
                <div>
                    <label for="admin-username" class="block text-sm font-medium text-gray-700">Username</label>
                    <input type="text" id="admin-username" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Enter username">
                </div>
                <div class="relative">
                    <label for="admin-password" class="block text-sm font-medium text-gray-700">Password</label>
                    <input type="password" id="admin-password" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md pr-10" placeholder="Set password">
                    <svg id="toggleAdminPassword" class="absolute right-3 top-9 text-gray-500 cursor-pointer" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path><circle cx="12" cy="12" r="3"></circle><path id="adminEyeSlashPath" class="hidden" d="M1 1l22 22"></path></svg>
                </div>
                <button type="submit" class="w-full bg-gray-800 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg">Create Admin</button>
            </form>
        </div>
    </div>
    <div id="employee-modal" class="modal-overlay hidden">
         <div class="modal-content">
            <button class="close-button absolute top-4 right-4 text-gray-500 hover:text-black text-2xl">&times;</button>
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Add New Employee</h2>
            <form class="space-y-4">
                <div>
                    <label for="employee-username" class="block text-sm font-medium text-gray-700">Username</label>
                    <input type="text" id="employee-username" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Enter username">
                </div>
                <div class="relative">
                    <label for="employee-password" class="block text-sm font-medium text-gray-700">Password</label>
                    <input type="password" id="employee-password" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md pr-10" placeholder="Set password">
                    <svg id="toggleEmployeePassword" class="absolute right-3 top-9 text-gray-500 cursor-pointer" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path><circle cx="12" cy="12" r="3"></circle><path id="employeeEyeSlashPath" class="hidden" d="M1 1l22 22"></path></svg>
                </div>
                <button type="submit" class="w-full bg-gray-800 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg">Create Employee</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- State Management ---
            let customerSearchTerm = '';
            let transactionSearchTerm = '';
            let customerSortCriteria = [];
            let transactionSortCriteria = [];

            // --- Mock Data ---
            const mockEmployees = [
                { id: 'E001', name: 'Alice Smith', assignedItems: ['Living Room', 'Office'] },
                { id: 'E002', name: 'Bob Johnson', assignedItems: ['Bedroom', 'Dining Room'] },
                { id: 'E003', name: 'Charlie Brown', assignedItems: ['Storage'] },
                { id: 'E004', name: 'Diana Prince', assignedItems: ['Outdoor', 'Children\'s'] },
                { id: 'E005', name: 'Eve Adams', assignedItems: ['Accent'] }
            ];
            const mockCustomers = [
                { id: 'C101', name: 'John Doe', address: '123 Main St, Anytown', created_at: '2023-01-15T10:00:00Z' },
                { id: 'C102', name: 'Jane Miller', address: '456 Oak Ave, Somewhere', created_at: '2023-02-20T11:30:00Z' },
                { id: 'C103', name: 'Peter Jones', address: '789 Pine Ln, Nowhere', created_at: '2023-03-01T14:15:00Z' },
                { id: 'C104', name: 'Sarah Davis', address: '101 Elm Blvd, Anyplace', created_at: '2023-04-05T09:00:00Z' },
                { id: 'C105', name: 'Michael White', address: '202 Birch Rd, Somecity', created_at: '2023-05-10T16:45:00Z' }
            ];
            const mockItems = [
                'Living Room', 'Bedroom', 'Dining Room', 'Office', 'Outdoor', 'Storage', 'Children\'s', 'Entryway', 'Accent', 'Modular'
            ];
            const generateMockTransactions = () => {
                const transactions = [];
                const today = new Date();
                const statuses = ['Completed', 'Pending', 'Failed', 'Refunded'];
                for (let i = 0; i < 50; i++) {
                    transactions.push({
                        id: `TRX${1000 + i}`,
                        employeeName: mockEmployees[Math.floor(Math.random() * mockEmployees.length)].name,
                        customerName: mockCustomers[Math.floor(Math.random() * mockCustomers.length)].name,
                        itemName: mockItems[Math.floor(Math.random() * mockItems.length)],
                        quantity: Math.floor(Math.random() * 3) + 1,
                        price: (Math.random() * 500 + 20),
                        date: new Date(today.getFullYear(), today.getMonth(), Math.floor(Math.random() * 28) + 1),
                        status: statuses[Math.floor(Math.random() * statuses.length)]
                    });
                }
                return transactions;
            };
            let mockTransactions = generateMockTransactions();

            // --- Utility Functions ---
            const openModal = (modalId) => document.getElementById(modalId).classList.remove('hidden');
            const closeModal = (modalId) => document.getElementById(modalId).classList.add('hidden');
            const showMessage = (message, type = 'info') => {
                const box = document.getElementById('dashboard-message-box');
                document.getElementById('dashboard-message-content').textContent = message;
                box.classList.remove('hidden');
                setTimeout(() => box.classList.add('hidden'), 5000);
            };

            // --- Search and Sort Logic ---
            const filterData = (data, searchTerm, tableType) => {
                if (!searchTerm) return data;
                const lowercasedTerm = searchTerm.toLowerCase();
                return data.filter(item => {
                    const searchableItem = { ...item };
                    if (tableType === 'transactions') {
                        searchableItem.price = `$${item.price.toFixed(2)}`;
                        searchableItem.date = item.date.toLocaleDateString();
                    }
                    if (tableType === 'customers') {
                        searchableItem.created_at = new Date(item.created_at).toLocaleDateString();
                    }
                    return Object.values(searchableItem).some(val =>
                        val.toString().toLowerCase().includes(lowercasedTerm)
                    );
                });
            };

            const getSortValue = (obj, column) => {
                const value = obj[column];
                if (value instanceof Date) return value.getTime();
                if (typeof value === 'number') return value;
                if (typeof value === 'string') return value.toLowerCase();
                return value;
            };

            const sortData = (data, criteria) => {
                if (!criteria.length) return data;
                return [...data].sort((a, b) => {
                    for (const { column, direction } of criteria) {
                        const valA = getSortValue(a, column);
                        const valB = getSortValue(b, column);
                        if (valA < valB) return direction === 'asc' ? -1 : 1;
                        if (valA > valB) return direction === 'asc' ? 1 : -1;
                    }
                    return 0;
                });
            };

            // --- Render Functions ---
            const renderCustomers = () => {
                const filtered = filterData(mockCustomers, customerSearchTerm, 'customers');
                const sorted = sortData(filtered, customerSortCriteria);
                const tableBody = document.getElementById('customers-table-body');
                tableBody.innerHTML = sorted.map(customer => `
                    <tr class="hover:bg-gray-100">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${customer.id}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${customer.name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${customer.address}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${new Date(customer.created_at).toLocaleDateString()}</td>
                    </tr>
                `).join('');
            };

            const renderTransactions = () => {
                const filtered = filterData(mockTransactions, transactionSearchTerm, 'transactions');
                const sorted = sortData(filtered, transactionSortCriteria);
                const tableBody = document.getElementById('transactions-table-body');
                const statusColors = { 'Completed': 'bg-green-100 text-green-800', 'Pending': 'bg-yellow-100 text-yellow-800', 'Failed': 'bg-red-100 text-red-800', 'Refunded': 'bg-blue-100 text-blue-800' };
                tableBody.innerHTML = sorted.map(t => `
                    <tr class="hover:bg-gray-100">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${t.id}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.employeeName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.customerName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.itemName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700 text-center">${t.quantity}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">$${t.price.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${t.date.toLocaleDateString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColors[t.status] || 'bg-gray-100'}">${t.status}</span></td>
                    </tr>
                `).join('');
            };

            const renderMonthlySales = () => {
                document.getElementById('monthly-sales').textContent = `$${mockTransactions.reduce((acc, t) => acc + t.price, 0).toFixed(2)}`;
                document.getElementById('current-date').textContent = new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
            };

            const renderEmployeeAssignments = () => {
                const listContainer = document.getElementById('employee-assignments-list');
                listContainer.innerHTML = mockEmployees.map(employee => `
                    <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg border hover:bg-gray-100">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">${employee.name}</h3>
                            <div class="mt-2 flex flex-wrap gap-2">${employee.assignedItems.map(item => `<span class="inline-block bg-gray-200 text-gray-800 text-xs px-2 py-1 rounded-full">${item}</span>`).join(' ') || '<span class="text-gray-500 text-sm">No items assigned</span>'}</div>
                        </div>
                        <button class="edit-assigned-items-btn bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700 text-sm" data-employee-id="${employee.id}">Edit</button>
                    </div>
                `).join('');
                document.querySelectorAll('.edit-assigned-items-btn').forEach(btn => btn.addEventListener('click', (e) => openEditModal(e.target.dataset.employeeId)));
            };
            
            const updateSortIndicators = (table, criteria) => {
                table.querySelectorAll('th[data-column]').forEach(th => {
                    const indicator = th.querySelector('.sort-indicator');
                    if (indicator) indicator.remove();
                });
                criteria.forEach(({ column, direction }, index) => {
                    const header = table.querySelector(`th[data-column="${column}"]`);
                    if (header) {
                        const indicator = document.createElement('span');
                        indicator.className = 'sort-indicator ml-1';
                        indicator.innerHTML = `(${index + 1}) ${direction === 'asc' ? '▲' : '▼'}`;
                        header.appendChild(indicator);
                    }
                });
            };

            const fullRender = () => {
                renderCustomers();
                renderTransactions();
                renderMonthlySales();
                renderEmployeeAssignments();
                updateSortIndicators(document.querySelector('#customers-table-body').closest('table'), customerSortCriteria);
                updateSortIndicators(document.querySelector('#transactions-table-body').closest('table'), transactionSortCriteria);
            };

            // --- Event Listeners ---
            document.getElementById('add-admin-btn').addEventListener('click', () => openModal('admin-modal'));
            document.getElementById('add-employee-btn').addEventListener('click', () => openModal('employee-modal'));
            document.querySelectorAll('.modal-overlay').forEach(m => m.addEventListener('click', (e) => { if (e.target === m) closeModal(m.id) }));
            document.querySelectorAll('.close-button').forEach(btn => btn.addEventListener('click', (e) => closeModal(e.target.closest('.modal-overlay').id)));
            
            document.getElementById('customer-search').addEventListener('input', e => {
                customerSearchTerm = e.target.value;
                renderCustomers();
            });
            document.getElementById('transaction-search').addEventListener('input', e => {
                transactionSearchTerm = e.target.value;
                renderTransactions();
            });

            document.getElementById('clear-customer-sort').addEventListener('click', () => {
                customerSortCriteria = [];
                fullRender();
            });
            document.getElementById('clear-transaction-sort').addEventListener('click', () => {
                transactionSortCriteria = [];
                fullRender();
            });

            document.querySelectorAll('th[data-column]').forEach(header => {
                header.addEventListener('click', (e) => {
                    const column = header.dataset.column;
                    const tableId = header.dataset.table;
                    let criteria = tableId === 'customers' ? customerSortCriteria : transactionSortCriteria;
                    
                    const existingIndex = criteria.findIndex(c => c.column === column);

                    if (e.shiftKey) {
                        if (existingIndex > -1) {
                            criteria[existingIndex].direction = criteria[existingIndex].direction === 'asc' ? 'desc' : 'asc';
                        } else {
                            criteria.push({ column, direction: 'asc' });
                        }
                    } else {
                        if (existingIndex > -1) {
                            const newDirection = criteria[existingIndex].direction === 'asc' ? 'desc' : 'asc';
                            criteria = [{ column, direction: newDirection }];
                        } else {
                            criteria = [{ column, direction: 'asc' }];
                        }
                    }

                    if (tableId === 'customers') {
                        customerSortCriteria = criteria;
                    } else {
                        transactionSortCriteria = criteria;
                    }
                    fullRender();
                });
            });

            // Edit Assignment Modal Logic
            let currentEditingEmployeeId = null;
            const openEditModal = (employeeId) => {
                const employee = mockEmployees.find(emp => emp.id === employeeId);
                if (!employee) return;
                currentEditingEmployeeId = employeeId;
                document.getElementById('modal-employee-name').textContent = employee.name;
                const select = document.getElementById('modal-assigned-items');
                select.innerHTML = mockItems.map(item => `<option value="${item}" ${employee.assignedItems.includes(item) ? 'selected' : ''}>${item}</option>`).join('');
                openModal('edit-assignment-modal');
            };
            document.getElementById('save-edit-btn').addEventListener('click', () => {
                const employee = mockEmployees.find(emp => emp.id === currentEditingEmployeeId);
                if (employee) {
                    employee.assignedItems = Array.from(document.getElementById('modal-assigned-items').selectedOptions).map(opt => opt.value);
                    showMessage(`Assignments for ${employee.name} updated.`, 'success');
                    renderEmployeeAssignments();
                }
                closeModal('edit-assignment-modal');
            });
            document.getElementById('cancel-edit-btn').addEventListener('click', () => closeModal('edit-assignment-modal'));
            
            // Initial Render
            fullRender();
        });
    </script>
</body>
</html>
