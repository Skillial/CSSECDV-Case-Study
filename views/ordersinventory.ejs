<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manager Dashboard</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Drag and Drop Area Styles */
        #drop-area {
            border: 2px dashed #cbd5e1; /* gray-300 */
            border-radius: 0.75rem; /* rounded-xl */
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
            margin-bottom: 1.5rem; /* mb-6 */
        }

        #drop-area.highlight {
            background-color: #f0f4f8; /* light blue/gray */
            border-color: #3b82f6; /* blue-500 */
        }

        .image-preview-item {
        width: 100px;
        height: 100px;
        overflow: hidden;
        border-radius: 8px; /* optional: makes corners rounded */
        border: 1px solid #ccc; /* optional: gives a frame */
        display: inline-block; /* keeps them in a row if needed */
        margin: 4px;
        }

        .image-preview-item img {
        width: 100%;
        height: 100%;
        object-fit: cover; /* crops and centers the image */
        display: block;
        }

        .image-preview-item .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(239, 68, 68, 0.8); /* red-500 with opacity */
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem; /* text-xs */
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
        }

        .image-preview-item .remove-btn:hover {
            background-color: #ef4444; /* red-500 */
        }
    </style>
</head>
<body class="min-h-screen bg-white text-black flex flex-col antialiased font-sans">
    <%- include('component/navbar') %>

    <div class="flex flex-row justify-center gap-4 mt-5">
        <button id="productsTabBtn" class="px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors">
            Products
        </button>
        <button id="ordersTabBtn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">
            Orders
        </button>
    </div>

    <!-- Main Content Area -->
    <main class="flex-1 p-8 w-full">
        <!-- Product Management Section -->
        <section id="productsSection" class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">Product Management</h1>
                <button id="addProductBtn"
                    class="px-5 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors flex items-center justify-center shadow-sm">
                    Add Product
                </button>
            </div>

            <div id="productsTableContainer" class="overflow-x-auto">
                <!-- Product table will be rendered here by JS -->
            </div>
            <p id="noProductsMessage" class="text-gray-600 text-center py-10 hidden">No products found. Add a new product to get started!</p>
        </section>

        <!-- Order Status Management Section -->
        <section id="ordersSection" class="bg-white p-6 rounded-lg shadow-md border border-gray-200 hidden">
            <h1 class="text-3xl font-bold mb-6">Order Status Management</h1>
            <div id="ordersTableContainer" class="overflow-x-auto">
                <!-- Order table will be rendered here by JS -->
            </div>
            <p id="noOrdersMessage" class="text-gray-600 text-center py-10 hidden">No orders found.</p>
        </section>
    </main>

    <!-- Modals -->
    <!-- Add Product Modal -->
    <div id="addProductModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-3xl border border-gray-200">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Add New Product</h2>
                <button id="closeAddProductModalBtn" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5">
                        <path d="M18 6 6 18" />
                        <path d="m6 6 12 12" />
                    </svg>
                </button>
            </div>
            <form id="addProductForm">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Left Column: Product Details Form -->
                <div class="space-y-4">
                    <div>
                        <label for="productName" class="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                        <input type="text" id="productName" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black" required>
                    </div>
                    <div>
                        <label for="productPrice" class="block text-sm font-medium text-gray-700 mb-1">Price ($)</label>
                        <input type="number" id="productPrice" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black" step="0.01" required>
                    </div>
                    <div>
                        <label for="productStock" class="block text-sm font-medium text-gray-700 mb-1">Stock Quantity</label>
                        <input type="number" id="productStock" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black" required>
                    </div>
                    <div>
                        <label for="productDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="productDescription" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black resize-y" rows="5"></textarea>
                    </div>
                </div>

                <!-- Right Column: Product Image Upload Section -->
                <div class="flex flex-col h-full">
                    <label for="productImage" class="block text-sm font-medium text-gray-700 mb-1">Product Image</label>

                    <div id="drop-area" class="flex flex-col items-center justify-center p-8 border-2 border-dashed border-gray-300 rounded-xl text-gray-600 hover:border-blue-500 hover:bg-gray-50 transition-colors cursor-pointer flex-grow">
                        <i class="fas fa-cloud-upload-alt text-4xl mb-3 text-gray-400"></i>
                        <p class="text-lg font-medium text-center">Drag & drop images here, or click to select files</p>
                        <input type="file" id="product-image-upload" multiple accept="image/*" class="hidden">
                    </div>

                    <div id="image-previews" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                        <!-- Image previews will be dynamically added here -->
                    </div>
                </div>
            </div>

            <div class="flex justify-end space-x-3 mt-6">
                <button type="button" id="cancelAddProductBtn" class="px-4 py-2 bg-gray-100 text-gray-800 rounded-md border border-gray-300 hover:bg-gray-200 transition-colors">
                    Cancel
                </button>
                <button type="submit" class="px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors flex items-center justify-center">
                    Add Product
                </button>
            </div>
        </form>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div id="editProductModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-3xl border border-gray-200">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Edit Product</h2>
                <button id="closeEditProductModalBtn" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5">
                        <path d="M18 6 6 18" />
                        <path d="m6 6 12 12" />
                    </svg>
                </button>
            </div>
            <form id="editProductForm" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Left Column: Product Details Form -->
                    <div class="space-y-4">
                        <input type="hidden" id="editProductId">
                        <div>
                            <label for="editProductName" class="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                            <input type="text" id="editProductName" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black" required>
                        </div>
                        <div>
                            <label for="editProductPrice" class="block text-sm font-medium text-gray-700 mb-1">Price ($)</label>
                            <input type="number" id="editProductPrice" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black" step="0.01" required>
                        </div>
                        <div>
                            <label for="editProductStock" class="block text-sm font-medium text-gray-700 mb-1">Stock Quantity</label>
                            <input type="number" id="editProductStock" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black" required>
                        </div>
                        <div>
                            <label for="editProductDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <textarea id="editProductDescription" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black resize-y" rows="3"></textarea>
                        </div>
                    </div>
                    <!-- Right Column: Product Image Upload Section -->
                    <div class="flex flex-col h-full">
                        <label for="productImage" class="block text-sm font-medium text-gray-700 mb-1">Product Image</label>

                        <div id="drop-area" class="flex flex-col items-center justify-center p-8 border-2 border-dashed border-gray-300 rounded-xl text-gray-600 hover:border-blue-500 hover:bg-gray-50 transition-colors cursor-pointer flex-grow">
                            <i class="fas fa-cloud-upload-alt text-4xl mb-3 text-gray-400"></i>
                            <p class="text-lg font-medium text-center">Drag & drop images here, or click to select files</p>
                            <input type="file" id="product-image-upload" multiple accept="image/*" class="hidden">
                        </div>

                        <div id="image-previews" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                            <!-- Image previews will be dynamically added here -->
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" id="cancelEditProductBtn" class="px-4 py-2 bg-gray-100 text-gray-800 rounded-md border border-gray-300 hover:bg-gray-200 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors flex items-center justify-center">
                        Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Custom Confirmation Modal -->
    <div id="confirmationModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm border border-gray-200">
            <h3 class="text-lg font-semibold mb-4" id="confirmationMessage"></h3>
            <div class="flex justify-end space-x-3">
                <button id="cancelConfirmationBtn" class="px-4 py-2 bg-gray-100 text-gray-800 rounded-md border border-gray-300 hover:bg-gray-200 transition-colors">Cancel</button>
                <button id="confirmActionBtn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">Delete</button>
            </div>
        </div>
    </div>

    <script>
        // Initial Data (will eventually come from backend)
        let products = [
            { id: 'p1', name: 'Wireless Headphones', price: 99.99, stock: 150, description: 'High-fidelity audio with noise cancellation.' },
            { id: 'p2', name: 'Ergonomic Keyboard', price: 75.00, stock: 80, description: 'Comfortable typing experience for long hours.' },
            { id: 'p3', name: 'Smartwatch', price: 199.99, stock: 120, description: 'Track your fitness and receive notifications.' },
            { id: 'p4', name: 'Portable SSD 1TB', price: 120.00, stock: 200, description: 'Fast and reliable external storage.' },
        ];

        let orders = [
            { id: 'o1', productName: 'Wireless Headphones', quantity: 1, customerName: 'Alice Smith', status: 'Pending' },
            { id: 'o2', productName: 'Smartwatch', quantity: 1, customerName: 'Bob Johnson', status: 'Processing' },
            { id: 'o3', productName: 'Ergonomic Keyboard', quantity: 2, customerName: 'Charlie Brown', status: 'Shipped' },
            { id: 'o4', productName: 'Portable SSD 1TB', quantity: 1, customerName: 'Diana Prince', status: 'Delivered' },
        ];

        // DOM Elements
        const productsTabBtn = document.getElementById('productsTabBtn');
        const ordersTabBtn = document.getElementById('ordersTabBtn');
        const productsSection = document.getElementById('productsSection');
        const ordersSection = document.getElementById('ordersSection');
        const productsTableContainer = document.getElementById('productsTableContainer');
        const ordersTableContainer = document.getElementById('ordersTableContainer');
        const noProductsMessage = document.getElementById('noProductsMessage');
        const noOrdersMessage = document.getElementById('noOrdersMessage');

        // Add Product Modal Elements
        const addProductBtn = document.getElementById('addProductBtn');
        const addProductModal = document.getElementById('addProductModal');
        const closeAddProductModalBtn = document.getElementById('closeAddProductModalBtn');
        const cancelAddProductBtn = document.getElementById('cancelAddProductBtn');
        const addProductForm = document.getElementById('addProductForm');
        const productNameInput = document.getElementById('productName');
        const productPriceInput = document.getElementById('productPrice');
        const productStockInput = document.getElementById('productStock');
        const productDescriptionInput = document.getElementById('productDescription');

        // Edit Product Modal Elements
        const editProductModal = document.getElementById('editProductModal');
        const closeEditProductModalBtn = document.getElementById('closeEditProductModalBtn');
        const cancelEditProductBtn = document.getElementById('cancelEditProductBtn');
        const editProductForm = document.getElementById('editProductForm');
        const editProductIdInput = document.getElementById('editProductId');
        const editProductNameInput = document.getElementById('editProductName');
        const editProductPriceInput = document.getElementById('editProductPrice');
        const editProductStockInput = document.getElementById('editProductStock');
        const editProductDescriptionInput = document.getElementById('editProductDescription');

        // Confirmation Modal Elements
        const confirmationModal = document.getElementById('confirmationModal');
        const confirmationMessage = document.getElementById('confirmationMessage');
        const cancelConfirmationBtn = document.getElementById('cancelConfirmationBtn');
        const confirmActionBtn = document.getElementById('confirmActionBtn');
        let currentDeleteProductId = null; // To store the ID of the product to be deleted

        // --- Utility Functions ---

        /**
         * Shows a modal.
         * @param {HTMLElement} modalElement - The modal DOM element.
         */
        function showModal(modalElement) {
            modalElement.classList.remove('hidden');
        }

        /**
         * Hides a modal.
         * @param {HTMLElement} modalElement - The modal DOM element.
         */
        function hideModal(modalElement) {
            modalElement.classList.add('hidden');
        }

        /**
         * Displays a custom confirmation dialog.
         * @param {string} message - The message to display.
         * @returns {Promise<boolean>} - Resolves true if confirmed, false if cancelled.
         */
        function showConfirmation(message) {
            return new Promise((resolve) => {
                confirmationMessage.textContent = message;
                showModal(confirmationModal);

                const onConfirm = () => {
                    hideModal(confirmationModal);
                    confirmActionBtn.removeEventListener('click', onConfirm);
                    cancelConfirmationBtn.removeEventListener('click', onCancel);
                    resolve(true);
                };

                const onCancel = () => {
                    hideModal(confirmationModal);
                    confirmActionBtn.removeEventListener('click', onConfirm);
                    cancelConfirmationBtn.removeEventListener('click', onCancel);
                    resolve(false);
                };

                confirmActionBtn.addEventListener('click', onConfirm);
                cancelConfirmationBtn.addEventListener('click', onCancel);
            });
        }


        // --- Render Functions ---

        /**
         * Renders the products table.
         */
        function renderProducts() {
            if (products.length === 0) {
                productsTableContainer.innerHTML = '';
                noProductsMessage.classList.remove('hidden');
                return;
            } else {
                noProductsMessage.classList.add('hidden');
            }

            let tableHTML = `
                <table class="min-w-full bg-white border border-gray-200 rounded-lg">
                    <thead>
                        <tr class="bg-gray-50 border-b border-gray-200 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                            <th class="py-3 px-4 rounded-tl-lg">Product Name</th>
                            <th class="py-3 px-4">Price</th>
                            <th class="py-3 px-4">Stock</th>
                            <th class="py-3 px-4">Description</th>
                            <th class="py-3 px-4 rounded-tr-lg text-right">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            products.forEach((product, index) => {
                const rowClass = index % 2 === 0 ? 'bg-white' : 'bg-gray-50';
                tableHTML += `
                        <tr class="border-b border-gray-100 ${rowClass}">
                            <td class="py-3 px-4">${product.name}</td>
                            <td class="py-3 px-4">$${product.price.toFixed(2)}</td>
                            <td class="py-3 px-4">${product.stock}</td>
                            <td class="py-3 px-4 text-gray-600 text-sm max-w-xs truncate">${product.description}</td>
                            <td class="py-3 px-4 text-right">
                                <div class="flex justify-end space-x-2">
                                    <button onclick="openEditProductModal('${product.id}')"
                                        class="p-2 rounded-md text-gray-600 hover:bg-gray-200 transition-colors"
                                        title="Edit Product">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
                                            <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
                                        </svg>
                                    </button>
                                    <button onclick="confirmDeleteProduct('${product.id}')"
                                        class="p-2 rounded-md text-red-600 hover:bg-red-100 transition-colors"
                                        title="Delete Product">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
                                            <path d="M3 6h18" />
                                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
                                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
                                            <line x1="10" x2="10" y1="11" y2="17" />
                                            <line x1="14" x2="14" y1="11" y2="17" />
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                `;
            });
            tableHTML += `
                    </tbody>
                </table>
            `;
            productsTableContainer.innerHTML = tableHTML;
        }

        /**
         * Renders the orders table.
         */
        function renderOrders() {
            if (orders.length === 0) {
                ordersTableContainer.innerHTML = '';
                noOrdersMessage.classList.remove('hidden');
                return;
            } else {
                noOrdersMessage.classList.add('hidden');
            }

            let tableHTML = `
                <table class="min-w-full bg-white border border-gray-200 rounded-lg">
                    <thead>
                        <tr class="bg-gray-50 border-b border-gray-200 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                            <th class="py-3 px-4 rounded-tl-lg">Order ID</th>
                            <th class="py-3 px-4">Product</th>
                            <th class="py-3 px-4">Quantity</th>
                            <th class="py-3 px-4">Customer</th>
                            <th class="py-3 px-4 rounded-tr-lg w-60">Status</th> <!-- Added w-60 for fixed width -->
                        </tr>
                    </thead>
                    <tbody>
            `;
            orders.forEach((order, index) => {
                const rowClass = index % 2 === 0 ? 'bg-white' : 'bg-gray-50';
                let statusColorClass = '';
                switch (order.status) {
                    case 'Delivered': statusColorClass = 'bg-green-100 text-green-800'; break;
                    case 'Shipped': statusColorClass = 'bg-blue-100 text-blue-800'; break;
                    case 'Processing': statusColorClass = 'bg-yellow-100 text-yellow-800'; break;
                    case 'Pending': statusColorClass = 'bg-red-100 text-red-800'; break;
                    case 'Cancelled': statusColorClass = 'bg-gray-200 text-gray-800'; break;
                }

                tableHTML += `
                        <tr class="border-b border-gray-100 ${rowClass}">
                            <td class="py-3 px-4 text-sm text-gray-700">${order.id}</td>
                            <td class="py-3 px-4">${order.productName}</td>
                            <td class="py-3 px-4">${order.quantity}</td>
                            <td class="py-3 px-4">${order.customerName}</td>
                            <td class="py-3 px-4 w-60"> <!-- Added w-60 for fixed width -->
                                <div class="flex items-center space-x-2">
                                    <select onchange="showSaveButtonForOrder('${order.id}', this)"
                                        class="p-2 rounded-md border border-gray-300 focus:outline-none focus:ring-1 focus:ring-black ${statusColorClass}"
                                        data-order-id="${order.id}">
                                        <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
                                        <option value="Processing" ${order.status === 'Processing' ? 'selected' : ''}>Processing</option>
                                        <option value="Shipped" ${order.status === 'Shipped' ? 'selected' : ''}>Shipped</option>
                                        <option value="Delivered" ${order.status === 'Delivered' ? 'selected' : ''}>Delivered</option>
                                        <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
                                    </select>
                                    <button id="saveStatusBtn-${order.id}"
                                            onclick="updateOrderStatus('${order.id}')"
                                            class="px-3 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors text-sm hidden">
                                        Save
                                    </button>
                                </div>
                            </td>
                        </tr>
                `;
            });
            tableHTML += `
                    </tbody>
                </table>
            `;
            ordersTableContainer.innerHTML = tableHTML;
        }

        // --- Event Handlers and Logic ---

        /**
         * Switches the active dashboard tab.
         * @param {string} tabName - 'products' or 'orders'.
         */
        function switchTab(tabName) {
            // Define common classes for active and inactive states
            const activeClasses = ['bg-black', 'text-white', 'hover:bg-gray-800'];
            const inactiveClasses = ['bg-gray-200', 'text-gray-800', 'hover:bg-gray-300'];

            if (tabName === 'products') {
                productsSection.classList.remove('hidden');
                ordersSection.classList.add('hidden');

                // Products tab becomes active
                productsTabBtn.classList.add(...activeClasses);
                productsTabBtn.classList.remove(...inactiveClasses);

                // Orders tab becomes inactive
                ordersTabBtn.classList.add(...inactiveClasses);
                ordersTabBtn.classList.remove(...activeClasses);

                renderProducts();
            } else if (tabName === 'orders') {
                productsSection.classList.add('hidden');
                ordersSection.classList.remove('hidden');

                // Orders tab becomes active
                ordersTabBtn.classList.add(...activeClasses);
                ordersTabBtn.classList.remove(...inactiveClasses);

                // Products tab becomes inactive
                productsTabBtn.classList.add(...inactiveClasses);
                productsTabBtn.classList.remove(...activeClasses);

                renderOrders();
            }
        }

        /**
         * Handles adding a new product.
         * @param {Event} e - The form submission event.
         */
        addProductForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const newProduct = {
                id: `p${products.length + 1}`, // Simple ID generation
                name: productNameInput.value,
                price: parseFloat(productPriceInput.value),
                stock: parseInt(productStockInput.value),
                description: productDescriptionInput.value,
            };
            products.push(newProduct);
            hideModal(addProductModal);
            addProductForm.reset(); // Clear form fields
            renderProducts();
        });

        /**
         * Opens the edit product modal with pre-filled data.
         * @param {string} productId - The ID of the product to edit.
         */
        function openEditProductModal(productId) {
            const productToEdit = products.find(p => p.id === productId);
            if (productToEdit) {
                editProductIdInput.value = productToEdit.id;
                editProductNameInput.value = productToEdit.name;
                editProductPriceInput.value = productToEdit.price;
                editProductStockInput.value = productToEdit.stock;
                editProductDescriptionInput.value = productToEdit.description;
                showModal(editProductModal);
            }
        }

        /**
         * Handles updating an existing product.
         * @param {Event} e - The form submission event.
         */
        editProductForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const updatedProduct = {
                id: editProductIdInput.value,
                name: editProductNameInput.value,
                price: parseFloat(editProductPriceInput.value),
                stock: parseInt(editProductStockInput.value),
                description: editProductDescriptionInput.value,
            };
            products = products.map(p => (p.id === updatedProduct.id ? updatedProduct : p));
            hideModal(editProductModal);
            renderProducts();
        });

        /**
         * Confirms product deletion before proceeding.
         * @param {string} productId - The ID of the product to delete.
         */
        async function confirmDeleteProduct(productId) {
            currentDeleteProductId = productId;
            const confirmed = await showConfirmation('Are you sure you want to delete this product? This action cannot be undone.');
            if (confirmed) {
                deleteProduct(currentDeleteProductId);
            }
            currentDeleteProductId = null; // Reset after action
        }

        /**
         * Deletes a product from the list.
         * @param {string} productId - The ID of the product to delete.
         */
        function deleteProduct(productId) {
            products = products.filter(p => p.id !== productId);
            renderProducts();
        }

        /**
         * Shows the save button for a specific order status change.
         * @param {string} orderId - The ID of the order.
         * @param {HTMLSelectElement} selectElement - The select dropdown element.
         */
        function showSaveButtonForOrder(orderId, selectElement) {
            const saveButton = document.getElementById(`saveStatusBtn-${orderId}`);
            if (saveButton) {
                saveButton.classList.remove('hidden');
            }
            // Store the new value temporarily, to be used when save is clicked
            const orderToUpdate = orders.find(o => o.id === orderId);
            if (orderToUpdate) {
                orderToUpdate._tempStatus = selectElement.value; // Use a temporary property
            }
        }

        /**
         * Updates the status of an order when the save button is clicked.
         * @param {string} orderId - The ID of the order to update.
         */
        function updateOrderStatus(orderId) {
            const orderToUpdate = orders.find(o => o.id === orderId);
            if (orderToUpdate && orderToUpdate._tempStatus) {
                orders = orders.map(o => (o.id === orderId ? { ...o, status: orderToUpdate._tempStatus } : o));
                delete orderToUpdate._tempStatus; // Clean up temporary property
                renderOrders(); // Re-render to update status colors and hide save button
            }
            // Hide the save button regardless
            const saveButton = document.getElementById(`saveStatusBtn-${orderId}`);
            if (saveButton) {
                saveButton.classList.add('hidden');
            }
        }

        // --- Event Listeners ---

        // Tab switching
        productsTabBtn.addEventListener('click', () => switchTab('products'));
        ordersTabBtn.addEventListener('click', () => switchTab('orders'));

        // Add Product Modal
        addProductBtn.addEventListener('click', () => showModal(addProductModal));
        closeAddProductModalBtn.addEventListener('click', () => hideModal(addProductModal));
        cancelAddProductBtn.addEventListener('click', () => hideModal(addProductModal));

        // Edit Product Modal
        closeEditProductModalBtn.addEventListener('click', () => hideModal(editProductModal));
        cancelEditProductBtn.addEventListener('click', () => hideModal(editProductModal));

        // Image Upload Logic
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('product-image-upload');
        const imagePreviews = document.getElementById('image-previews');
        const productImageActions = document.getElementById('product-image-actions'); // This element is now hidden by default in HTML

        let uploadedFiles = [];

        // Simulate opening the modal for testing
        // You can remove this line in your actual application


        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false); // Prevent drop on entire body
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Highlight drop area when dragging over
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropArea.classList.add('border-blue-500', 'bg-blue-50');
        }

        function unhighlight() {
            dropArea.classList.remove('border-blue-500', 'bg-blue-50');
        }

        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        // Handle file input change
        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        // Trigger file input click when drop area is clicked
        dropArea.addEventListener('click', () => {
            fileInput.click();
        });

        function handleFiles(files) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (file.type.startsWith('image/')) {
                    uploadedFiles.push(file);
                    previewFile(file);
                }
            }
            // Removed the visibility toggle for productImageActions as save/cancel buttons are gone.
            // If you want to show/hide based on image presence, you'd need to re-add logic here.
        }

        function previewFile(file) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = function() {
                const imgContainer = document.createElement('div');
                imgContainer.classList.add('relative', 'group', 'rounded-lg', 'overflow-hidden', 'aspect-w-1', 'aspect-h-1');

                const img = document.createElement('img');
                img.src = reader.result;
                img.classList.add('w-[100px]', 'h-[100px]', 'object-cover', 'rounded-lg');

                const removeButton = document.createElement('button');
                removeButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 text-white">
                                            <path d="M18 6 6 18" />
                                            <path d="m6 6 12 12" />
                                        </svg>`;
                removeButton.classList.add('absolute', 'top-2', 'right-2', 'bg-red-500', 'bg-opacity-75', 'rounded-full', 'p-1', 'opacity-0', 'group-hover:opacity-100', 'transition-opacity', 'flex', 'items-center', 'justify-center');
                removeButton.addEventListener('click', () => {
                    removeImagePreview(file, imgContainer);
                });

                imgContainer.appendChild(img);
                imgContainer.appendChild(removeButton);
                imagePreviews.appendChild(imgContainer);
            }
        }

        function removeImagePreview(fileToRemove, container) {
            uploadedFiles = uploadedFiles.filter(file => file !== fileToRemove);
            container.remove();
            // Removed the visibility toggle for productImageActions as save/cancel buttons are gone.
        }

        // Initial render on page load
        document.addEventListener('DOMContentLoaded', () => {
            switchTab('products'); // Start on the products tab
        });
    </script>
</body>
</html>
