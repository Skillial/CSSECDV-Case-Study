<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .container {
            max-width: 480px;
            width: 100%;
        }
        /* Styles for password strength bar */
        .password-strength-bar {
            width: 100%;
            height: 8px;
            background-color: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 8px;
        }
        .password-strength-bar-fill {
            height: 100%;
            width: 0%;
            background-color: #e0e0e0; /* Default color */
            transition: width 0.3s ease-in-out, background-color 0.3s ease-in-out;
            border-radius: 4px;
        }

        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.3s;
            z-index: 1000;
        }
        .modal-overlay.show {
            visibility: visible;
            opacity: 1;
        }
        .modal-content {
            background-color: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 400px;
            transform: translateY(-20px);
            transition: transform 0.3s ease-out;
        }
        .modal-overlay.show .modal-content {
            transform: translateY(0);
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="container bg-white p-8 rounded-xl shadow-lg border border-gray-200">
        <h2 class="text-3xl font-bold text-center text-gray-800 mb-6">Forgot Password</h2>

        <!-- Message Display Area -->
        <div id="message" class="hidden p-3 mb-4 rounded-lg text-sm text-center" role="alert"></div>

        <!-- Combined Step 1: Enter Username, Security Question & Answer -->
        <div id="step1" class="space-y-6">
            <p class="text-center text-gray-600 mb-4">Enter your details to verify your account.</p>
            <div>
                <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                <input type="text" id="username" name="username" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Your username">
            </div>
            <div id="securityQuestionSelection" class="space-y-4">
                <div>
                    <label for="securityQuestion" class="block text-sm font-medium text-gray-700 mb-1">Select Security Question</label>
                    <select id="securityQuestion" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        <option value="">-- Select a question --</option>
                        <option value="What was the name of your favorite fictional character?">What was the name of your favorite fictional character?</option>
                        <option value="What was the first album you ever fully listened?">What was the first album you ever fully listened?</option>
                        <option value="What was the name of your favorite teacher in high school?">What was the name of your favorite teacher in high school?</option>
                        <option value="What was the first movie you remember seeing in a theater?">What was the first movie you remember seeing in a theater?</option>
                        <option value="What was the first concert you ever attended?">What was the first concert you ever attended?</option>
                        <option value="What is the name of a historical figure you admire?">What is the name of a historical figure you admire?</option>
                        <option value="What was the first job you had that wasn't for a company?">What was the first job you had that wasn't for a company?</option>
                    </select>
                </div>
                <div>
                    <label for="securityAnswer" class="block text-sm font-medium text-gray-700 mb-1">Your Answer</label>
                    <input type="text" id="securityAnswer" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Your answer">
                </div>
            </div>
            <p class="text-center text-gray-500 text-sm mt-4">If you have not set a security question, please send an email to <a href="mailto:Occasio@gmail.com" class="text-blue-600 hover:underline">Occasio@gmail.com</a>.</p>
            <button id="verifyBtn" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-700 transition duration-150 ease-in-out">
                Verify Details
            </button>
        </div>

        <!-- Step 2: Change Password (formerly Step 3) -->
        <div id="step2" class="hidden space-y-6">
            <p class="text-center text-gray-600 mb-4">Set your new password.</p>
            <div class="relative">
                <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                <input type="password" id="newPassword" name="newPassword" class="mt-1 block w-full px-4 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter new password">
                <!-- Eye icon for password visibility toggle -->
                <svg id="toggleNewPassword" class="absolute right-3 transform translate-y-2 text-gray-500 hover:text-gray-700 cursor-pointer transition-colors duration-200" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="top: 40%;">
                    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                    <path id="newEyeSlashPath" class="hidden" d="M1 1l22 22"></path>
                </svg>
            </div>

            <!-- Password Strength and Requirements Section -->
            <div class="mt-2">
                <div class="password-strength-bar">
                    <div id="strengthBarFill" class="password-strength-bar-fill"></div>
                </div>
                <div class="flex justify-between items-center mt-1.5">
                    <p id="strengthText" class="text-sm text-gray-600">Password Strength: Very Weak</p>
                    <button type="button" id="openComplexityModal" class="text-sm text-gray-600 hover:text-gray-900 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400 rounded-md px-1">
                        Requirements
                    </button>
                </div>
            </div>

            <div class="relative">
                <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" class="mt-1 block w-full px-4 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Confirm new password">
                <!-- Eye icon for confirm password visibility toggle -->
                <svg id="toggleConfirmPassword" class="absolute right-3 transform translate-y-2 text-gray-500 hover:text-gray-700 cursor-pointer transition-colors duration-200" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="top: 40%;">
                    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                    <path id="confirmEyeSlashPath" class="hidden" d="M1 1l22 22"></path>
                </svg>
            </div>
            <button id="resetPasswordBtn" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-700 transition duration-150 ease-in-out">
                Reset Password
            </button>
            <button id="backToVerificationBtn" class="w-full py-2 px-4 border border-gray-300 rounded-md shadow-sm text-base font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                Back to Verification
            </button>
        </div>
    </div>

    <!-- Password Complexity Modal -->
    <div id="complexityModal" class="modal-overlay">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-gray-900">Password Requirements</h3>
                <button id="closeComplexityModal" class="text-gray-500 hover:text-gray-700 text-2xl leading-none">&times;</button>
            </div>
            <div id="passwordComplexityList" class="text-sm text-gray-700">
                <p class="font-semibold mb-1">Your password must contain:</p>
                <ul class="list-disc list-inside ml-4 space-y-1">
                    <li id="modalLengthCheck" class="text-gray-700">At least 8 characters</li>
                    <li id="modalUppercaseCheck" class="text-gray-700">An uppercase letter</li>
                    <li id="modalLowercaseCheck" class="text-gray-700">A lowercase letter</li>
                    <li id="modalNumberCheck" class="text-gray-700">A number</li>
                    <li id="modalSpecialCharCheck" class="text-gray-700">A special character (!@#$%^&*)</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const step1 = document.getElementById('step1'); // Combined verification step
        const step2 = document.getElementById('step2'); // Password reset step
        const usernameInput = document.getElementById('username');
        const securityQuestionSelect = document.getElementById('securityQuestion');
        const securityAnswerInput = document.getElementById('securityAnswer');
        const verifyBtn = document.getElementById('verifyBtn');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const resetPasswordBtn = document.getElementById('resetPasswordBtn');
        const messageDiv = document.getElementById('message');
        const backToVerificationBtn = document.getElementById('backToVerificationBtn');

        // Password complexity elements
        const strengthBarFill = document.getElementById('strengthBarFill');
        const strengthText = document.getElementById('strengthText');
        const complexityModal = document.getElementById('complexityModal');
        const openComplexityModalBtn = document.getElementById('openComplexityModal');
        const closeComplexityModalBtn = document.getElementById('closeComplexityModal');
        const modalLengthCheck = document.getElementById('modalLengthCheck');
        const modalUppercaseCheck = document.getElementById('modalUppercaseCheck');
        const modalLowercaseCheck = document.getElementById('modalLowercaseCheck');
        const modalNumberCheck = document.getElementById('modalNumberCheck');
        const modalSpecialCharCheck = document.getElementById('modalSpecialCharCheck');

        // Password visibility toggles
        const toggleNewPassword = document.getElementById('toggleNewPassword');
        const newEyeSlashPath = document.getElementById('newEyeSlashPath');
        const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
        const confirmEyeSlashPath = document.getElementById('confirmEyeSlashPath');

        let currentUsername = ''; // Stores the username after successful verification

        // Utility function to show messages
        function showMessage(text, type = 'info') {
            messageDiv.textContent = text;
            messageDiv.classList.remove('hidden', 'bg-red-100', 'text-red-700', 'bg-green-100', 'text-green-700', 'bg-blue-100', 'text-blue-700');
            if (type === 'error') {
                messageDiv.classList.add('bg-red-100', 'text-red-700');
            } else if (type === 'success') {
                messageDiv.classList.add('bg-green-100', 'text-green-700');
            } else { // info
                messageDiv.classList.add('bg-blue-100', 'text-blue-700');
            }
            messageDiv.classList.remove('hidden');
        }

        // Utility function to hide messages
        function hideMessage() {
            messageDiv.classList.add('hidden');
        }

        // Show/Hide Steps
        function showStep(stepNumber) {
            step1.classList.add('hidden');
            step2.classList.add('hidden');
            hideMessage(); // Clear messages when changing steps

            if (stepNumber === 1) {
                step1.classList.remove('hidden');
            } else if (stepNumber === 2) {
                step2.classList.remove('hidden');
            }
        }

        // Combined Step 1: Handle Username, Security Question & Answer Submission
        verifyBtn.addEventListener('click', async () => {
            const username = usernameInput.value.trim();
            const selectedQuestion = securityQuestionSelect.value; // Get the full question text
            const userAnswer = securityAnswerInput.value.trim();

            if (!username || !selectedQuestion || !userAnswer) {
                showMessage('Please fill in all verification details.', 'error');
                return;
            }

            verifyBtn.disabled = true;

            try {
                const response = await fetch('/verify-details', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        username: username,
                        question: selectedQuestion, // Send the full question text
                        answer: userAnswer
                    }),
                });

                const result = await response.json();

                if (response.ok) {
                    currentUsername = username; // Store username for the next step
                    showStep(2); // Go to password reset step
                    // Clear inputs after successful verification
                    usernameInput.value = '';
                    securityQuestionSelect.value = '';
                    securityAnswerInput.value = '';
                } else {
                    // Display generic error message from backend
                    showMessage(result.message || 'Could not verify your details. Please try again.', 'error');
                    // Stay on Step 1
                }
            } catch (error) {
                console.error('Network or unexpected error during verification:', error);
                showMessage('Network error or server unreachable. Please try again.', 'error');
            } finally {
                verifyBtn.disabled = false;
            }
        });

        // Helper function to update check UI for password complexity
        function updateCheckUI(element, isMet) {
            element.classList.remove('text-red-600', 'text-green-600', 'text-gray-700');
            if (isMet) {
                element.classList.add('text-green-600');
            } else {
                element.classList.add('text-red-600');
            }
        }

        // Function to check password complexity and update UI
        function checkPasswordComplexity() {
            const password = newPasswordInput.value;
            let checksMet = 0;

            const checks = {
                length: password.length >= 8,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /[0-9]/.test(password),
                special: /[!@#$%^&*]/.test(password),
            };

            updateCheckUI(modalLengthCheck, checks.length);
            updateCheckUI(modalUppercaseCheck, checks.uppercase);
            updateCheckUI(modalLowercaseCheck, checks.lowercase);
            updateCheckUI(modalNumberCheck, checks.number);
            updateCheckUI(modalSpecialCharCheck, checks.special);

            checksMet = Object.values(checks).filter(Boolean).length;

            const totalChecks = 5;
            const strengthPercentage = (checksMet / totalChecks) * 100;
            strengthBarFill.style.width = `${strengthPercentage}%`;

            let strengthColor = '#e0e0e0'; // Default gray
            let strengthMessage = 'Very Weak';

            if (checksMet === 1) {
                strengthColor = '#f87171'; // Red
                strengthMessage = 'Weak';
            } else if (checksMet === 2) {
                strengthColor = '#fbbf24'; // Amber
                strengthMessage = 'Fair';
            } else if (checksMet === 3) {
                strengthColor = '#fcd34d'; // Yellow
                strengthMessage = 'Good';
            } else if (checksMet === 4) {
                strengthColor = '#84cc16'; // Lime Green
                strengthMessage = 'Strong';
            } else if (checksMet === 5) {
                strengthColor = '#22c55e'; // Green
                strengthMessage = 'Very Strong';
            }

            strengthBarFill.style.backgroundColor = strengthColor;
            strengthText.textContent = `Password Strength: ${strengthMessage}`;

            return checksMet === totalChecks;
        }

        // Step 2: Handle Password Reset
        resetPasswordBtn.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (!newPassword || !confirmPassword) {
                showMessage('Please enter and confirm your new password.', 'error');
                return;
            }
            if (newPassword !== confirmPassword) {
                showMessage('Passwords do not match.', 'error');
                return;
            }

            const isPasswordComplex = checkPasswordComplexity();
            if (!isPasswordComplex) {
                showMessage('Password does not meet complexity requirements. Click "Requirements" for details.', 'error');
                return;
            }

            resetPasswordBtn.disabled = true;

            try {
                const response = await fetch('/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        username: currentUsername, // Use the username from the successful verification
                        newPassword: newPassword
                    }),
                });

                const result = await response.json();

                if (response.ok) {
                    showMessage(result.message || 'Your password has been reset successfully! You can now log in with your new password.', 'success');
                    // Redirect to login page or clear form after success
                    setTimeout(() => {
                        window.location.href = '/login'; // Redirect to login page
                    }, 1000); // Show success message for 3 seconds then redirect
                } else {
                    showMessage(result.message || 'Failed to reset password. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Network or unexpected error during password reset:', error);
                showMessage('Network error or server unreachable. Please try again.', 'error');
            } finally {
                resetPasswordBtn.disabled = false;
            }
        });

        // Back button from password reset to verification
        backToVerificationBtn.addEventListener('click', () => {
            showStep(1);
            // Clear inputs when going back
            usernameInput.value = '';
            securityQuestionSelect.value = '';
            securityAnswerInput.value = '';
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
            currentUsername = ''; // Clear current user
        });

        // --- Password Visibility Toggle Logic ---
        toggleNewPassword.addEventListener('click', function() {
            const type = newPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            newPasswordInput.setAttribute('type', type);
            newEyeSlashPath.classList.toggle('hidden');
        });

        toggleConfirmPassword.addEventListener('click', function() {
            const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmPasswordInput.setAttribute('type', type);
            confirmEyeSlashPath.classList.toggle('hidden');
        });

        // --- Password Complexity Modal Functionality ---
        openComplexityModalBtn.addEventListener('click', () => {
            complexityModal.classList.add('show');
            checkPasswordComplexity(); // Ensure modal content is up-to-date
        });

        closeComplexityModalBtn.addEventListener('click', () => {
            complexityModal.classList.remove('show');
        });

        complexityModal.addEventListener('click', (event) => {
            if (event.target === complexityModal) {
                complexityModal.classList.remove('show');
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && complexityModal.classList.contains('show')) {
                complexityModal.classList.remove('show');
            }
        });

        // --- Prevent copy/paste/cut on password fields ---
        const preventClipboardActions = (event) => {
            event.preventDefault();
        };

        newPasswordInput.addEventListener('copy', preventClipboardActions);
        newPasswordInput.addEventListener('paste', preventClipboardActions);
        newPasswordInput.addEventListener('cut', preventClipboardActions);

        confirmPasswordInput.addEventListener('copy', preventClipboardActions);
        confirmPasswordInput.addEventListener('paste', preventClipboardActions);
        confirmPasswordInput.addEventListener('cut', preventClipboardActions);

        // Event listeners for inputs to hide messages as user types
        usernameInput.addEventListener('input', hideMessage);
        securityQuestionSelect.addEventListener('change', hideMessage);
        securityAnswerInput.addEventListener('input', hideMessage);
        newPasswordInput.addEventListener('input', checkPasswordComplexity); // Also check complexity
        newPasswordInput.addEventListener('input', hideMessage);
        confirmPasswordInput.addEventListener('input', hideMessage);


        // Initialize by showing the first step
        showStep(1);
    </script>
</body>
</html>
