<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .container {
            max-width: 480px;
            width: 100%;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="container bg-white p-8 rounded-xl shadow-lg border border-gray-200">
        <h2 class="text-3xl font-bold text-center text-gray-800 mb-6">Forgot Password</h2>

        <!-- Message Display Area -->
        <div id="message" class="hidden p-3 mb-4 rounded-lg text-sm text-center" role="alert"></div>

        <!-- Step 1: Enter Email/Username -->
        <div id="step1" class="space-y-6">
            <p class="text-center text-gray-600 mb-4">Enter your email address to find your account.</p>
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                <input type="email" id="email" name="email" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="you@example.com">
            </div>
            <button id="nextBtn" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-700 transition duration-150 ease-in-out">
                Next
            </button>
        </div>

        <!-- Step 2: Answer Security Questions -->
        <div id="step2" class="hidden space-y-6">
            <p class="text-center text-gray-600 mb-4">Please answer your security questions to verify your identity.</p>
            <div id="securityQuestionsContainer" class="space-y-4">
                <!-- Security questions will be dynamically inserted here -->
            </div>
            <button id="verifyBtn" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-700 transition duration-150 ease-in-out">
                Verify Answers
            </button>
            <button id="backToEmailBtn" class="w-full py-2 px-4 border border-gray-300 rounded-md shadow-sm text-base font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                Back to Email
            </button>
        </div>

        <!-- Step 3: Change Password -->
        <div id="step3" class="hidden space-y-6">
            <p class="text-center text-gray-600 mb-4">Set your new password.</p>
            <div>
                <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                <input type="password" id="newPassword" name="newPassword" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter new password">
            </div>
            <div>
                <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Confirm new password">
            </div>
            <button id="resetPasswordBtn" class="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-700 transition duration-150 ease-in-out">
                Reset Password
            </button>
            <button id="backToQuestionsBtn" class="w-full py-2 px-4 border border-gray-300 rounded-md shadow-sm text-base font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                Back to Security Questions
            </button>
        </div>
    </div>

    <script>
        // DOM Elements
        const step1 = document.getElementById('step1');
        const step2 = document.getElementById('step2');
        const step3 = document.getElementById('step3');
        const emailInput = document.getElementById('email');
        const nextBtn = document.getElementById('nextBtn');
        const securityQuestionsContainer = document.getElementById('securityQuestionsContainer');
        const verifyBtn = document.getElementById('verifyBtn');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const resetPasswordBtn = document.getElementById('resetPasswordBtn');
        const messageDiv = document.getElementById('message');
        const backToEmailBtn = document.getElementById('backToEmailBtn');
        const backToQuestionsBtn = document.getElementById('backToQuestionsBtn');

        // Simulated User Data (In a real application, this would come from a backend)
        const users = {
            "user@example.com": {
                securityQuestions: [
                    { id: "q1", question: "What is your mother's maiden name?", answer: "Smith" },
                    { id: "q2", question: "What was the name of your first pet?", answer: "Buddy" }
                ],
                password: "oldpassword123" // This would be hashed in a real app
            },
            "test@example.com": {
                securityQuestions: [
                    { id: "q1", question: "What city were you born in?", answer: "New York" },
                    { id: "q2", question: "What is your favorite color?", answer: "Blue" }
                ],
                password: "testpassword"
            }
        };

        let currentUserEmail = ''; // Stores the email of the user currently going through the flow

        // Utility function to show messages
        function showMessage(text, type = 'info') {
            messageDiv.textContent = text;
            messageDiv.classList.remove('hidden', 'bg-red-100', 'text-red-700', 'bg-green-100', 'text-green-700', 'bg-blue-100', 'text-blue-700');
            if (type === 'error') {
                messageDiv.classList.add('bg-red-100', 'text-red-700');
            } else if (type === 'success') {
                messageDiv.classList.add('bg-green-100', 'text-green-700');
            } else { // info
                messageDiv.classList.add('bg-blue-100', 'text-blue-700');
            }
            messageDiv.classList.remove('hidden');
        }

        // Utility function to hide messages
        function hideMessage() {
            messageDiv.classList.add('hidden');
        }

        // Simulate API call delay
        function simulateApiCall(callback) {
            return new Promise(resolve => {
                setTimeout(() => {
                    callback();
                    resolve();
                }, 1000); // 1 second delay
            });
        }

        // Show/Hide Steps
        function showStep(stepNumber) {
            step1.classList.add('hidden');
            step2.classList.add('hidden');
            step3.classList.add('hidden');
            hideMessage(); // Clear messages when changing steps

            if (stepNumber === 1) {
                step1.classList.remove('hidden');
            } else if (stepNumber === 2) {
                step2.classList.remove('hidden');
            } else if (stepNumber === 3) {
                step3.classList.remove('hidden');
            }
        }

        // Step 1: Handle Email Submission
        nextBtn.addEventListener('click', async () => {
            const email = emailInput.value.trim();
            if (!email) {
                showMessage('Please enter your email address.', 'error');
                return;
            }

            nextBtn.disabled = true;

            await simulateApiCall(() => {
                if (users[email]) {
                    currentUserEmail = email;
                    populateSecurityQuestions(users[email].securityQuestions);
                    showStep(2);
                    emailInput.value = ''; // Clear email input
                } else {
                    showMessage('Account not found. Please check your email address.', 'error');
                }
            });

            nextBtn.disabled = false;
        });

        // Populate Security Questions
        function populateSecurityQuestions(questions) {
            securityQuestionsContainer.innerHTML = ''; // Clear previous questions
            questions.forEach((q, index) => {
                const questionDiv = document.createElement('div');
                questionDiv.innerHTML = `
                    <label for="answer${index}" class="block text-sm font-medium text-gray-700 mb-1">${q.question}</label>
                    <input type="text" id="answer${index}" data-question-id="${q.id}" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Your answer">
                `;
                securityQuestionsContainer.appendChild(questionDiv);
            });
        }

        // Step 2: Handle Security Questions Verification
        verifyBtn.addEventListener('click', async () => {
            const userAnswers = [];
            const questionInputs = securityQuestionsContainer.querySelectorAll('input[type="text"]');
            let allAnswered = true;

            questionInputs.forEach(input => {
                if (!input.value.trim()) {
                    allAnswered = false;
                }
                userAnswers.push({
                    id: input.dataset.questionId,
                    answer: input.value.trim()
                });
            });

            if (!allAnswered) {
                showMessage('Please answer all security questions.', 'error');
                return;
            }

            verifyBtn.disabled = true;

            await simulateApiCall(() => {
                const correctAnswers = users[currentUserEmail].securityQuestions;
                let isCorrect = true;

                userAnswers.forEach(userAns => {
                    const correctQ = correctAnswers.find(q => q.id === userAns.id);
                    if (!correctQ || userAns.answer.toLowerCase() !== correctQ.answer.toLowerCase()) {
                        isCorrect = false;
                    }
                });

                if (isCorrect) {
                    showStep(3);
                    // Clear security question inputs
                    questionInputs.forEach(input => input.value = '');
                } else {
                    showMessage('Incorrect answers. Please try again.', 'error');
                }
            });

            verifyBtn.disabled = false;
        });

        // Step 3: Handle Password Reset
        resetPasswordBtn.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (!newPassword || !confirmPassword) {
                showMessage('Please enter and confirm your new password.', 'error');
                return;
            }
            if (newPassword.length < 6) {
                showMessage('Password must be at least 6 characters long.', 'error');
                return;
            }
            if (newPassword !== confirmPassword) {
                showMessage('Passwords do not match.', 'error');
                return;
            }

            resetPasswordBtn.disabled = true;

            await simulateApiCall(() => {
                // In a real application, you would send this to your backend to update the password
                users[currentUserEmail].password = newPassword; // Simulated update
                showMessage('Your password has been reset successfully! You can now log in with your new password.', 'success');
                // Optionally redirect to login page or clear form
                setTimeout(() => {
                    showStep(1); // Go back to email input
                    hideMessage();
                    newPasswordInput.value = '';
                    confirmPasswordInput.value = '';
                    currentUserEmail = '';
                }, 3000); // Show success message for 3 seconds then reset
            });

            resetPasswordBtn.disabled = false;
        });

        // Back buttons
        backToEmailBtn.addEventListener('click', () => {
            showStep(1);
            emailInput.value = currentUserEmail; // Pre-fill email
        });

        backToQuestionsBtn.addEventListener('click', () => {
            showStep(2);
            populateSecurityQuestions(users[currentUserEmail].securityQuestions); // Re-populate questions
        });

        // Initialize by showing the first step
        showStep(1);
    </script>
</body>
</html>