<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.product_name %> Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Hide number input spinners (Chrome, Safari, Edge, Opera) */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Firefox */
        input[type=number] {
            -moz-appearance: textfield;
        }

        body {
            font-family: 'Inter', sans-serif;
        }

        /* Custom styles for image zoom */
        .image-zoom-container {
            overflow: hidden;
            cursor: zoom-in;
        }

        .image-zoom-container img {
            transition: transform 0.3s ease-out;
            transform-origin: center center;
        }

        .image-zoom-container:hover img {
            transform: scale(1.5);
        }

        /* Active tab styling */
        .tab-button.active {
            border-bottom: 2px solid #333;
            color: #333;
            font-weight: 600;
        }

        /* Styles for the thumbnail container */
        .thumbnail-container {
            display: flex;
            justify-content: center; /* Default to center alignment */
            gap: 1rem;
            overflow-x: auto;
            flex-wrap: nowrap;
            padding-bottom: 1rem;
            -webkit-overflow-scrolling: touch;

            /* Basic scrollbar styling for Firefox */
            scrollbar-width: thin;
            scrollbar-color: #a0aec0 #edf2f7;
        }

        /* Custom scrollbar styles for Webkit browsers (Chrome, Safari) */
        .thumbnail-container::-webkit-scrollbar {
            height: 8px;
        }

        .thumbnail-container::-webkit-scrollbar-track {
            background: #edf2f7;
            border-radius: 10px;
        }

        .thumbnail-container::-webkit-scrollbar-thumb {
            background-color: #a0aec0;
            border-radius: 10px;
            border: 2px solid #edf2f7;
        }

        .thumbnail-container::-webkit-scrollbar-thumb:hover {
            background-color: #718096;
        }
    </style>
</head>

<body class="bg-gray-100 min-h-screen text-gray-800 font-sans">
    <%- include('component/navbar') %>
        <!-- Header/Breadcrumbs -->
        <header class="bg-white py-4 px-6 shadow-sm">
            <nav class="container mx-auto flex items-center text-sm text-gray-600">
                <a href="/home" class="hover:underline">Home</a>
                <span class="mx-2">/</span>
                <a href="/home?category=<%= encodeURIComponent(product.category) %>" class="hover:underline"><%= product.category %></a>
                <span class="mx-2">/</span>
                <span class="font-semibold text-gray-800"><%= product.product_name %></span>
            </nav>
        </header>

        <!-- Main Product Section -->
        <main class="container mx-auto p-6 bg-white my-6 rounded-lg shadow-lg flex flex-col lg:flex-row">

            <!-- Product Image Gallery (Left Column) -->
            <div class="lg:w-1/2 flex flex-col items-center lg:pr-8">
                <div id="mainImageContainer" class="relative w-full max-w-md mb-6 image-zoom-container">
                    <img id="mainProductImage" src="https://placehold.co/600x600/F8F8F8/333333?text=Loading+Image"
                        onerror="this.onerror=null;this.src='https://placehold.co/600x600/F8F8F8/333333?text=Image+Not+Found';"
                        alt="<%= product.product_name %> main image"
                        class="w-full h-auto rounded-lg border border-gray-200">
                </div>

                <div id="thumbnail-container" class="thumbnail-container w-full">
                    <!-- Thumbnails will be injected here by JavaScript -->
                </div>
            </div>

            <!-- Product Details (Right Column) -->
            <div class="lg:w-1/2 mt-8 lg:mt-0 lg:pl-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-2"><%= product.product_full_name %></h1>
                <p class="text-2xl font-semibold text-gray-800 mb-4">â‚±<%= product.price.toFixed(2) %></p>
                <p class="text-<%= product.stock > 0 ? 'green' : 'red' %>-600 text-sm font-medium mb-6 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                            clip-rule="evenodd" />
                    </svg>
                    <%= product.stock > 0 ? 'In stock (' + product.stock + ' available)' : 'Out of stock' %>
                </p>

                <% if (product.type && product.type_options && product.type_options.length > 0) { %>
                <!-- Dynamic Type Options -->
                <div class="mb-6">
                    <p class="text-gray-700 font-medium mb-2"><%= product.type %></p>
                    <div id="typeOptions" class="flex flex-wrap gap-3">
                        <% product.type_options.forEach(option => { %>
                            <button
                                class="type-option-button px-4 py-2 border rounded-lg text-gray-800 hover:bg-gray-100 transition duration-200 font-medium"
                                data-option="<%= option %>">
                                <%= option %>
                            </button>
                        <% }); %>
                    </div>
                </div>
                <% } %>

                <!-- Quantity Selector -->
                <div class="mb-8">
                    <p class="text-gray-700 font-medium mb-2">Quantity</p>
                    <div class="flex items-center border border-gray-300 rounded-lg w-32">
                        <button id="decreaseQuantity"
                            class="px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-l-lg transition">-</button>
                        <input id="quantityInput" type="number" min="1" max="<%= product.stock %>" value="1"
                            class="w-full text-center border-l border-r border-gray-300 py-2 focus:outline-none bg-white text-gray-800">
                        <button id="increaseQuantity"
                            class="px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-r-lg transition">+</button>
                    </div>
                </div>

                <!-- Action Buttons - Only Buy It Now -->
                <div class="flex flex-col sm:flex-row gap-4 mb-8">
                    <button
                        class="flex-1 bg-gray-900 text-white py-3 rounded-xl font-semibold hover:bg-gray-700 transition duration-300 ease-in-out transform hover:scale-105 shadow-md <%= product.stock === 0 ? 'opacity-50 cursor-not-allowed' : '' %>"
                        <%= product.stock === 0 ? 'disabled' : '' %>>
                        BUY IT NOW
                    </button>
                </div>

                <!-- Brands & SKU -->
                <div class="text-sm text-gray-700 mb-6">
                    <p class="mb-1"><span class="font-semibold">BRAND:</span> <%= product.brand %></p>
                    <p><span class="font-semibold">SKU:</span> <%= product.sku %></p>
                </div>
            </div>
        </main>

        <!-- Product Tabs Section -->
        <section class="container mx-auto p-6 bg-white my-6 rounded-lg shadow-lg">
            <div class="border-b border-gray-200">
                <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                    <button
                        class="tab-button whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 active"
                        data-tab="description">
                        DESCRIPTION
                    </button>
                </nav>
            </div>

            <div id="tab-content" class="mt-6">
                <div id="description" class="tab-pane">
                    <h3 class="font-semibold text-gray-800 text-lg mb-2"><%= product.product_full_name %></h3>
                    <p class="leading-relaxed text-gray-700 mb-4">
                        <%= product.description || 'No description available for this product.' %>
                    </p>
                    <% if (product.features && product.features.length > 0) { %>
                    <ul class="list-disc list-inside mt-4 space-y-1 text-gray-700">
                        <% product.features.forEach(feature => { %>
                            <li><%= feature %></li>
                        <% }); %>
                    </ul>
                    <% } else { %>
                        <p class="text-gray-600">No specific features listed for this product.</p>
                    <% } %>
                </div>
            </div>
        </section>

        <script>
            // Product data passed from the server
            const product = <%- JSON.stringify(product) %>;

            // --- DOM Elements ---
            const mainProductImage = document.getElementById('mainProductImage');
            const mainImageContainer = document.getElementById('mainImageContainer');
            const thumbnailContainer = document.getElementById('thumbnail-container');
            const typeOptionsContainer = document.getElementById('typeOptions'); // Reference the container for type options
            const quantityInput = document.getElementById('quantityInput');
            const decreaseButton = document.getElementById('decreaseQuantity');
            const increaseButton = document.getElementById('increaseQuantity');
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanes = document.querySelectorAll('.tab-pane'); // Currently only description

            // --- Functions ---

            /**
             * Selects a type option button, applying active styles and removing them from others.
             * @param {HTMLElement} selectedButton - The button element to mark as selected.
             */
            function selectTypeOption(selectedButton) {
                // Get all type option buttons dynamically
                const currentTypeOptionButtons = typeOptionsContainer ? typeOptionsContainer.querySelectorAll('.type-option-button') : [];
                currentTypeOptionButtons.forEach(button => {
                    button.classList.remove('border-gray-900', 'bg-gray-200'); // Remove selected styles
                    button.classList.add('border-gray-400', 'bg-white'); // Add default styles
                });
                selectedButton.classList.remove('border-gray-400', 'bg-white'); // Remove default styles
                selectedButton.classList.add('border-gray-900', 'bg-gray-200'); // Add selected styles
            }

            /**
             * Updates the main product image and highlights the selected thumbnail.
             * @param {HTMLElement} selectedThumbnail - The thumbnail image element that was clicked.
             */
            function selectThumbnail(selectedThumbnail) {
                // Remove selected styling from all thumbnails
                const currentThumbnails = document.querySelectorAll('.thumbnail-image');
                currentThumbnails.forEach(thumb => {
                    thumb.classList.remove('border-gray-900'); // Active border color
                    thumb.classList.add('border-gray-200'); // Default border color
                });

                // Add selected styling to the clicked thumbnail
                selectedThumbnail.classList.remove('border-gray-200');
                selectedThumbnail.classList.add('border-gray-900'); // Active border color

                // Update the main product image
                mainProductImage.src = selectedThumbnail.dataset.mainSrc;
                mainProductImage.alt = selectedThumbnail.dataset.mainAlt;
            }

            /**
             * Renders all product thumbnails into the container based on `product.images`.
             */
            function renderThumbnails() {
                thumbnailContainer.innerHTML = ''; // Clear any existing content
                if (!product.images || product.images.length === 0) {
                    // Display a placeholder if no images are available
                    const placeholderImg = document.createElement('img');
                    placeholderImg.src = 'https://placehold.co/100x100/F8F8F8/333333?text=No+Images';
                    placeholderImg.alt = 'No images available';
                    placeholderImg.classList.add(
                        'w-24', 'h-24', 'rounded-lg', 'border-2', 'border-gray-200', 'flex-shrink-0'
                    );
                    thumbnailContainer.appendChild(placeholderImg);
                    mainProductImage.src = 'https://placehold.co/600x600/F8F8F8/333333?text=No+Images';
                    mainProductImage.alt = 'No images available';
                    return;
                }

                product.images.forEach(image => {
                    const img = document.createElement('img');
                    img.src = image.src;
                    img.alt = image.alt;
                    img.classList.add(
                        'thumbnail-image',
                        'w-24',
                        'h-24',
                        'rounded-lg',
                        'border-2',
                        'border-gray-200',
                        'cursor-pointer',
                        'hover:border-gray-600',
                        'transition',
                        'flex-shrink-0',
                        'object-cover' // Ensure image covers the area
                    );
                    img.dataset.mainSrc = image.src; // Store main image source for click
                    img.dataset.mainAlt = image.alt;

                    img.onerror = function () {
                        this.onerror = null;
                        this.src = 'https://placehold.co/100x100/F8F8F8/333333?text=Error';
                    };

                    img.addEventListener('click', () => {
                        selectThumbnail(img);
                    });
                    thumbnailContainer.appendChild(img);
                });

                // Dynamically adjust justification based on content width.
                setTimeout(() => {
                    const isOverflowing = thumbnailContainer.scrollWidth > thumbnailContainer.clientWidth;

                    if (isOverflowing) {
                        thumbnailContainer.classList.remove('justify-center');
                        thumbnailContainer.classList.add('justify-start');
                    } else {
                        thumbnailContainer.classList.remove('justify-start');
                        thumbnailContainer.classList.add('justify-center');
                    }
                }, 0);

                // Select the first thumbnail after rendering
                const renderedThumbnails = document.querySelectorAll('.thumbnail-image');
                if (renderedThumbnails.length > 0) {
                    selectThumbnail(renderedThumbnails[0]);
                }
            }

            /**
             * Shows the content for a specific tab.
             * @param {string} tabId - The ID of the tab to show.
             */
            function showTab(tabId) {
                // Remove active styles from all tab buttons and hide all tab panes
                tabButtons.forEach(button => {
                    button.classList.remove('active', 'border-gray-900', 'text-gray-900');
                    button.classList.add('border-transparent', 'text-gray-500');
                });
                tabPanes.forEach(pane => pane.classList.add('hidden'));

                // Add active styles to the selected tab button and show its pane
                const selectedTabButton = document.querySelector(`.tab-button[data-tab="${tabId}"]`);
                const selectedTabPane = document.getElementById(tabId);

                if (selectedTabButton && selectedTabPane) {
                    selectedTabButton.classList.add('active', 'border-gray-900', 'text-gray-900');
                    selectedTabButton.classList.remove('border-transparent', 'text-gray-500');
                    selectedTabPane.classList.remove('hidden');
                }
            }

            // --- Event Listeners and Initialization ---

            // Quantity Selector
            quantityInput.addEventListener('input', () => {
                let val = parseInt(quantityInput.value);
                const maxStock = parseInt(quantityInput.max);
                if (isNaN(val) || val < 1) {
                    quantityInput.value = 1;
                } else if (val > maxStock) { // Limit to available stock
                    quantityInput.value = maxStock;
                }
            });

            decreaseButton.addEventListener('click', () => {
                let currentQuantity = parseInt(quantityInput.value) || 1;
                quantityInput.value = Math.max(1, currentQuantity - 1);
            });

            increaseButton.addEventListener('click', () => {
                let currentQuantity = parseInt(quantityInput.value) || 1;
                const maxStock = parseInt(quantityInput.max);
                quantityInput.value = Math.min(maxStock, currentQuantity + 1);
            });

            // Image Zoom on Hovered Area
            mainImageContainer.addEventListener('mousemove', (e) => {
                const { left, top, width, height } = mainImageContainer.getBoundingClientRect();
                const x = (e.clientX - left) / width * 100;
                const y = (e.clientY - top) / height * 100;
                mainProductImage.style.transformOrigin = `${x}% ${y}%`;
            });

            // Reset transform-origin when mouse leaves
            mainImageContainer.addEventListener('mouseleave', () => {
                mainProductImage.style.transformOrigin = 'center center';
            });

            // Tabbed Content Functionality
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    showTab(button.dataset.tab);
                });
            });

            document.addEventListener('DOMContentLoaded', () => {
                // Initialize type option selection if options exist
                const typeOptionButtons = document.querySelectorAll('.type-option-button');
                if (typeOptionButtons.length > 0) {
                    selectTypeOption(typeOptionButtons[0]); // Select the first option by default
                    typeOptionButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            selectTypeOption(button);
                        });
                    });
                }

                // Render all thumbnails
                renderThumbnails();

                // Show the default tab (Description) on page load
                showTab('description');
            });
        </script>

</body>

</html>
