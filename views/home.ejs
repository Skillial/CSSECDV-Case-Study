<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Occasio</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Custom Toast Notification */
        #toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #22c55e; /* green-500 */
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transform: translateX(calc(100% + 20px));
            transition: transform 0.5s ease-in-out;
            z-index: 100;
        }

        #toast-notification.show {
            transform: translateX(0);
        }

        #toast-notification.error {
            background-color: #ef4444; /* red-500 */
        }
        /* Category Filter Item Styling */
        .category-filter-item {
            color: #6b7280; /* gray-500 - default text color */
            transition: all 0.2s ease-in-out;
        }
        .category-filter-item:hover {
            color: #4b5563; /* gray-700 - darker on hover */
            transform: scale(1.05); /* Slightly enlarge on hover */
        }
        .category-filter-item.active {
            color: #1f2937; /* gray-900 - very dark for active */
            font-weight: 600; /* semibold */
            transform: scale(1.1); /* More pronounced enlarge for active */
        }
        .category-filter-item.active .fa {
            color: #1f2937; /* Ensure icon also changes color */
        }
        .category-filter-item.active span {
            color: #1f2937; /* Ensure text also changes color */
        }
    </style>
</head>
<body class="bg-white text-gray-800 font-sans">
    <%- include('component/navbar') %>

    <!-- Search Bar -->
    <div class="flex justify-center px-6 py-4">
        <div class="flex gap-2 bg-white border border-gray-300 rounded-full shadow-sm px-4 py-2 w-full max-w-4xl items-center">
            <input type="text" id="searchInput" placeholder="Search products..." class="flex-1 outline-none placeholder-gray-500 text-sm px-2" />
            <button id="searchButton" class="p-2 rounded-full text-gray-600 hover:bg-gray-100 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.9 14.32a8 8 0 111.414-1.414l4.387 4.387a1 1 0 01-1.414 1.414l-4.387-4.387zM8 14a6 6 0 100-12 6 6 0 000 12z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    </div>

    <!-- Category Filters -->
    <div class="flex justify-center px-6 py-4 text-sm text-gray-500 border-b">
        <div id="categoryFiltersContainer" class="flex flex-wrap gap-10 justify-center">
            <!-- Hardcoded Categories based on your provided list -->
            <div class="flex flex-col items-center group cursor-pointer category-filter-item active" data-category="All">
                <span><i class="fa fa-th-large text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">All</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Living Room">
                <span><i class="fa fa-couch text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Living Room</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Bedroom">
                <span><i class="fa fa-bed text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Bedroom</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Dining Room">
                <span><i class="fa fa-utensils text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Dining Room</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Office">
                <span><i class="fa fa-briefcase text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Office</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Outdoor">
                <span><i class="fa fa-tree text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Outdoor</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Storage">
                <span><i class="fa-solid fa-boxes-stacked text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Storage</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Children's">
                <span><i class="fa-solid fa-shapes text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Children's</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Entryway">
                <span><i class="fa-solid fa-dungeon text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Entryway</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Accent">
                <span><i class="fa-solid fa-star text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Accent</span>
            </div>
            <div class="flex flex-col items-center group cursor-pointer category-filter-item" data-category="Modular">
                <span><i class="fa-solid fa-dolly text-2xl transition-transform duration-200 group-hover:scale-110"></i></span>
                <span class="text-sm transition-colors duration-200">Modular</span>
            </div>
        </div>
    </div>

    <!-- Products Section -->
    <div class="px-6 py-6">
        <div id="productsContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 justify-items-center">
            <!-- Product cards will be dynamically loaded here -->
            <% products.forEach(product => { %>
                <div class="w-full max-w-[250px] rounded-xl overflow-hidden shadow-sm bg-white border border-gray-100 hover:shadow-md transition-shadow duration-200 cursor-pointer"
                     data-product-id="<%= product.id %>"
                     onclick="window.location.href='/product/<%= product.id %>'">
                    <img src="<%= product.imageUrl || 'https://placehold.co/250x150/E2E8F0/A0AEC0?text=No+Image' %>" alt="<%= product.name %>" class="w-full h-40 object-cover" />
                    <div class="p-4">
                        <h3 class="text-base font-semibold text-gray-900 truncate"><%= product.name %></h3>
                        <p class="text-sm text-gray-600"><%= product.category %></p>
                        <p class="text-lg font-bold text-gray-900 mt-2">â‚±<%= product.price ? product.price.toFixed(2) : '0.00' %></p>
                        <p class="text-xs text-gray-500 mt-1">Stock: <%= product.stock %></p>
                    </div>
                </div>
            <% }); %>
        </div>
        <p id="noProductsMessage" class="text-gray-600 text-center py-10 <% if (products.length > 0) { %>hidden<% } %>">No products found matching your criteria.</p>
        <div class="flex justify-center mt-8">
            <button id="loadMoreBtn" class="px-6 py-3 bg-gray-900 text-white font-semibold rounded-lg hover:bg-gray-700 transition-colors hidden">
                Load More
            </button>
        </div>
        <div id="loadingIndicator" class="text-center py-4 hidden">
            <i class="fas fa-spinner fa-spin text-2xl text-gray-600"></i>
            <p class="text-gray-600">Loading products...</p>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast-notification">
        <p id="toast-message"></p>
    </div>

    <script>
        let currentPage = 1;
        const productsPerPage = 8; // Matches initialLimit in homeController.page
        let currentCategory = `<%- category %>` || 'All'; // Initialize with server-rendered category
        let currentSearchTerm = `<%- search %>` || ''; // Initialize with server-rendered search term
        let isLoading = false;
        let hasMoreProducts = true; // Will be determined by fetchProducts

        // DOM Elements
        const productsContainer = document.getElementById('productsContainer');
        const categoryFiltersContainer = document.getElementById('categoryFiltersContainer');
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        const loadMoreBtn = document.getElementById('loadMoreBtn');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const noProductsMessage = document.getElementById('noProductsMessage');
        const toast = document.getElementById('toast-notification');
        const toastMessage = document.getElementById('toast-message');

        // --- UI & Utility Functions ---
        function showToast(message, isError = false) {
            toastMessage.textContent = message;
            toast.classList.toggle('error', isError);
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        function showLoading(show) {
            loadingIndicator.classList.toggle('hidden', !show);
            loadMoreBtn.classList.toggle('hidden', show || !hasMoreProducts);
        }

        /**
         * Renders product cards into the productsContainer.
         * @param {Array} productsToRender - Array of product objects.
         * @param {boolean} append - If true, appends to existing products; otherwise, replaces.
         */
        function renderProducts(productsToRender, append = true) {
            if (!append) {
                productsContainer.innerHTML = ''; // Clear existing products if not appending
            }

            if (productsToRender.length === 0 && productsContainer.children.length === 0) { // Check if container is truly empty
                noProductsMessage.classList.remove('hidden');
            } else {
                noProductsMessage.classList.add('hidden');
            }

            productsToRender.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'w-full max-w-[250px] rounded-xl overflow-hidden shadow-sm bg-white border border-gray-100 hover:shadow-md transition-shadow duration-200 cursor-pointer';
                productCard.dataset.productId = product.id;
                productCard.onclick = () => { window.location.href = `/product/${product.id}`; }; // Add click handler

                productCard.innerHTML = `
                    <img src="${product.imageUrl || 'https://placehold.co/250x150/E2E8F0/A0AEC0?text=No+Image'}" alt="${product.name}" class="w-full h-40 object-cover" />
                    <div class="p-4">
                        <h3 class="text-base font-semibold text-gray-900 truncate">${product.name}</h3>
                        <p class="text-sm text-gray-600">${product.category || 'N/A'}</p>
                        <p class="text-lg font-bold text-gray-900 mt-2">â‚±${product.price ? product.price.toFixed(2) : '0.00'}</p>
                        <p class="text-xs text-gray-500 mt-1">Stock: ${product.stock || 0}</p>
                    </div>
                `;
                productsContainer.appendChild(productCard);
            });
        }

        /**
         * Fetches products from the backend based on current filters and pagination.
         */
        async function fetchProducts() {
            if (isLoading) return;
            if (!hasMoreProducts && currentPage > 1) return;

            isLoading = true;
            showLoading(true);

            try {
                let url = `/customer/products?page=${currentPage}&limit=${productsPerPage}`;
                if (currentCategory !== 'All') {
                    url += `&category=${encodeURIComponent(currentCategory)}`;
                }
                if (currentSearchTerm) {
                    url += `&search=${encodeURIComponent(currentSearchTerm)}`;
                }

                const response = await fetch(url);
                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Failed to fetch products.');
                }

                renderProducts(data.products, currentPage > 1);
                hasMoreProducts = data.products.length === productsPerPage;
                loadMoreBtn.classList.toggle('hidden', !hasMoreProducts);

                if (data.products.length === 0 && productsContainer.children.length === 0) {
                    noProductsMessage.classList.remove('hidden');
                } else {
                    noProductsMessage.classList.add('hidden');
                }

            } catch (error) {
                console.error('Error fetching products:', error);
                showToast(error.message, true);
                if (productsContainer.children.length === 0) {
                    noProductsMessage.classList.remove('hidden');
                }
            } finally {
                isLoading = false;
                showLoading(false);
            }
        }

        // --- Event Listeners ---
        loadMoreBtn.addEventListener('click', () => {
            if (!isLoading && hasMoreProducts) {
                currentPage++;
                fetchProducts();
            }
        });

        searchButton.addEventListener('click', () => {
            currentSearchTerm = searchInput.value.trim();
            currentPage = 1;
            hasMoreProducts = true;
            productsContainer.innerHTML = '';
            fetchProducts();
        });

        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                searchButton.click();
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            // Set initial search input value
            searchInput.value = currentSearchTerm;

            // Set the active category based on the initialCategory from the server
            categoryFiltersContainer.querySelectorAll('.category-filter-item').forEach(item => {
                if (item.dataset.category === currentCategory) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
                // Attach event listener to each category filter item
                item.addEventListener('click', () => {
                    categoryFiltersContainer.querySelectorAll('.category-filter-item').forEach(el => el.classList.remove('active'));
                    item.classList.add('active');
                    currentCategory = item.dataset.category;
                    currentPage = 1;
                    hasMoreProducts = true;
                    productsContainer.innerHTML = '';
                    fetchProducts();
                });
            });

            // The initial products are already rendered by EJS.
            // We only need to determine if "Load More" button should be visible.
            // This logic needs to be aware of the total number of products vs. initialLimit
            // For simplicity, if the initial load fills exactly `productsPerPage`, assume more might exist.
            hasMoreProducts = productsContainer.children.length === productsPerPage;
            loadMoreBtn.classList.toggle('hidden', !hasMoreProducts);
            if (productsContainer.children.length === 0) {
                noProductsMessage.classList.remove('hidden');
            }

            // --- Display flash messages from server on page load ---
            // Check for success messages passed from the server
            <% if (success_messages && success_messages.length > 0) { %>
                showToast(`<%= success_messages[0].replace(/`/g, '\\`') %>`, false); // Display first success message
            <% } %>

            // Check for error messages passed from the server
            <% if (error_messages && error_messages.length > 0) { %>
                showToast(`<%= error_messages[0].replace(/`/g, '\\`') %>`, true); // Display first error message
            <% } %>

            // --- NEW: Display lastLoginReport from server on page load ---
            <% if (lastLoginReport) { %>
                showToast(`<%= lastLoginReport.replace(/`/g, '\\`') %>`, false); // Display last login report as a success message
            <% } %>
        });
    </script>
</body>
</html>
